"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[699],{3905:function(e,t,n){n.r(t),n.d(t,{MDXContext:function(){return l},MDXProvider:function(){return m},mdx:function(){return h},useMDXComponents:function(){return u},withMDXComponents:function(){return p}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(){return c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},c.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),p=function(e){return function(t){var n=u(t.components);return r.createElement(e,c({},t,{components:n}))}},u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,c=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,f=p["".concat(a,".").concat(m)]||p[m]||d[m]||c;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var c=n.length,a=new Array(c);a[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,a[1]=o;for(var l=2;l<c;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},44793:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return u}});var r=n(83117),i=n(80102),c=(n(67294),n(3905)),a=["components"],o={title:"since",category:"Expression Terms"},s=void 0,l={unversionedId:"expr/since",id:"expr/since",title:"since",description:"Evaluates as true if the specified time property of the file is greater than the",source:"@site/docs/expr/since.md",sourceDirName:"expr",slug:"/expr/since",permalink:"/watchman/docs/expr/since",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/expr/since.md",tags:[],version:"current",frontMatter:{title:"since",category:"Expression Terms"},sidebar:"tutorialSidebar",previous:{title:"pcre & ipcre",permalink:"/watchman/docs/expr/pcre"},next:{title:"size",permalink:"/watchman/docs/expr/size"}},p={},u=[],m={toc:u};function d(e){var t=e.components,n=(0,i.Z)(e,a);return(0,c.mdx)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,c.mdx)("p",null,"Evaluates as true if the specified time property of the file is greater than the\nsince value. Note that this is not the same as the ",(0,c.mdx)("inlineCode",{parentName:"p"},"since")," generator; when used\nas an expression term we are performing a straight clockspec comparison. When\nused as a generator, candidate files are selected based on the ",(0,c.mdx)("inlineCode",{parentName:"p"},"since")," time\nindex. The end result might or might not be the same--in particular, if the\n",(0,c.mdx)("inlineCode",{parentName:"p"},"since")," time index is not passed in, it will be treated the same as a fresh\ninstance, and only files that exist will be returned. The efficiency can vary\nbased on the size and shape of the file tree that you are watching; it may be\ncheaper to generate the candidate set of files by suffix and then check the\nmodification time if many files were changed since your last query."),(0,c.mdx)("p",null,'This will yield a true value if the observed change time is more recent than the\nspecified clockspec (this is equivalent to specifying "oclock" as the third\nparameter):'),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre"},' ["since", "c:12345:234"]\n')),(0,c.mdx)("p",null,"You may specify particular fields from the filesystem metadata. In this case\nyour clockspec should be a unix time value:"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre"},' ["since", 12345668, "mtime"]\n ["since", 12345668, "ctime"]\n')),(0,c.mdx)("p",null,"You may explicitly request the observed clock values too; in these cases we'll\naccept either a timestamp or a clock value. The ",(0,c.mdx)("inlineCode",{parentName:"p"},"oclock")," is the last observed\nchange clock value (observed clock) and the ",(0,c.mdx)("inlineCode",{parentName:"p"},"cclock")," is the clock value where we\nfirst observed the file come into existence (created clock):"),(0,c.mdx)("pre",null,(0,c.mdx)("code",{parentName:"pre"},' ["since", 12345668, "oclock"]\n ["since", "c:1234:123", "oclock"]\n ["since", 12345668, "cclock"]\n ["since", "c:1234:2342", "cclock"]\n')))}d.isMDXComponent=!0}}]);