"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[8632],{3905:function(e,n,a){a.r(n),a.d(n,{MDXContext:function(){return s},MDXProvider:function(){return h},mdx:function(){return w},useMDXComponents:function(){return c},withMDXComponents:function(){return m}});var t=a(67294);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var a=arguments[n];for(var t in a)Object.prototype.hasOwnProperty.call(a,t)&&(e[t]=a[t])}return e},r.apply(this,arguments)}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function l(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function d(e,n){if(null==e)return{};var a,t,i=function(e,n){if(null==e)return{};var a,t,i={},r=Object.keys(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||(i[a]=e[a]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)a=r[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=t.createContext({}),m=function(e){return function(n){var a=c(n.components);return t.createElement(e,r({},n,{components:a}))}},c=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):l(l({},n),e)),a},h=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},p=t.forwardRef((function(e,n){var a=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=c(a),h=i,p=m["".concat(o,".").concat(h)]||m[h]||u[h]||r;return a?t.createElement(p,l(l({ref:n},s),{},{components:a})):t.createElement(p,l({ref:n},s))}));function w(e,n){var a=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=p;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=a[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}p.displayName="MDXCreateElement"},23309:function(e,n,a){a.r(n),a.d(n,{assets:function(){return m},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return c}});var t=a(83117),i=a(80102),r=(a(67294),a(3905)),o=["components"],l={title:"Release Notes",category:"Installation"},d=void 0,s={unversionedId:"release-notes",id:"release-notes",title:"Release Notes",description:"Watchman is continuously deployed inside Facebook, which means that we don't",source:"@site/docs/release-notes.md",sourceDirName:".",slug:"/release-notes",permalink:"/watchman/docs/release-notes",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/release-notes.md",tags:[],version:"current",frontMatter:{title:"Release Notes",category:"Installation"},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/watchman/docs/install"},next:{title:"Command Line",permalink:"/watchman/docs/cli-options"}},m={},c=[{value:"Watchman v2020.07.13.00",id:"watchman-v2020071300",level:3},{value:"Watchman 4.9.0 (2017-08-24)",id:"watchman-490-2017-08-24",level:3},{value:"Watchman 4.8.0 (never formally released)",id:"watchman-480-never-formally-released",level:3},{value:"Watchman 4.7.0 (2016-09-10)",id:"watchman-470-2016-09-10",level:3},{value:"Watchman 4.6.0 (2016-07-09)",id:"watchman-460-2016-07-09",level:3},{value:"pywatchman 1.4.0 (????-??-??)",id:"pywatchman-140---",level:3},{value:"Watchman 4.5.0 (2016-02-18)",id:"watchman-450-2016-02-18",level:3},{value:"Watchman 4.4.0 (2016-02-02)",id:"watchman-440-2016-02-02",level:3},{value:"Watchman 4.3.0 (2015-12-14)",id:"watchman-430-2015-12-14",level:3},{value:"Watchman 4.2.0 (2015-12-08)",id:"watchman-420-2015-12-08",level:3},{value:"pywatchman 1.3.0 (2015-10-22)",id:"pywatchman-130-2015-10-22",level:3},{value:"Watchman 4.1.0 (2015-10-20)",id:"watchman-410-2015-10-20",level:3},{value:"Watchman 4.0.0 (2015-10-19)",id:"watchman-400-2015-10-19",level:3},{value:"Watchman 3.9.0 (2015-10-12)",id:"watchman-390-2015-10-12",level:3},{value:"Watchman 3.8.0 (2015-09-14)",id:"watchman-380-2015-09-14",level:3},{value:"pywatchman 1.2.0 (2015-08-15)",id:"pywatchman-120-2015-08-15",level:3},{value:"fb-watchman 1.3.0 for node (2015-08-15)",id:"fb-watchman-130-for-node-2015-08-15",level:3},{value:"pywatchman 1.0.0 (2015-08-06)",id:"pywatchman-100-2015-08-06",level:3},{value:"Watchman 3.7.0 (2015-08-05)",id:"watchman-370-2015-08-05",level:3},{value:"fb-watchman 1.2.0 for node (2015-07-11)",id:"fb-watchman-120-for-node-2015-07-11",level:3},{value:"Watchman 3.5.0 (2015-06-29)",id:"watchman-350-2015-06-29",level:3},{value:"Watchman 3.4.0 (2015-06-29)",id:"watchman-340-2015-06-29",level:3},{value:"fb-watchman 1.1.0 for node (2015-06-25)",id:"fb-watchman-110-for-node-2015-06-25",level:3},{value:"fb-watchman 1.0.0 for node (2015-06-23)",id:"fb-watchman-100-for-node-2015-06-23",level:3},{value:"Watchman 3.3.0 (2015-06-22)",id:"watchman-330-2015-06-22",level:3}],h={toc:c};function u(e){var n=e.components,a=(0,i.Z)(e,o);return(0,r.mdx)("wrapper",(0,t.Z)({},h,a,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"Watchman is continuously deployed inside Facebook, which means that we don't\nexplicitly maintain version numbers. We have automation that cuts a weekly tag\nwith a named derived from the date. You can learn more about how to reason about\nsupported ",(0,r.mdx)("em",{parentName:"p"},"capabilities")," and our backwards compatibility guidelines in the\n",(0,r.mdx)("a",{parentName:"p",href:"/watchman/docs/compatibility"},"Compatibility Rules")," docs."),(0,r.mdx)("p",null,"We focus on the highlights only in these release notes. For a full history that\nincludes all of the gory details, please see\n",(0,r.mdx)("a",{parentName:"p",href:"https://github.com/facebook/watchman/commits/main"},"the commit history on GitHub"),"."),(0,r.mdx)("h3",{id:"watchman-v2020071300"},"Watchman v2020.07.13.00"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Added script ",(0,r.mdx)("inlineCode",{parentName:"li"},"watchman-replicate-subscription"),". It can replicate an existing\nwatchman subscription. Integrators can use this script to validate watchman\nnotifications their client is receiving."),(0,r.mdx)("li",{parentName:"ul"},"Added support for suffix sets in suffix expressions. You now can specify\nmultiple suffixes to match against by setting the second argument to a list of\nsuffixes. See ",(0,r.mdx)("inlineCode",{parentName:"li"},"suffix-set")," documentation for\n",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/expr/suffix#suffix-set"},"more details")),(0,r.mdx)("li",{parentName:"ul"},"pywatchman: introduced new pywatchman_aio client for python"),(0,r.mdx)("li",{parentName:"ul"},"Windows: we no longer trust environment variables to locate the state\ndirectory which should result in a better experience for users that mix\ncygwin, mingw, native windows and/or WSL or other environments"),(0,r.mdx)("li",{parentName:"ul"},"Windows: we now support unix domain sockets on Windows 10. The CLI will prefer\nto use unix domain sockets when available.")),(0,r.mdx)("p",null,"We weren't great at updating the release notes since the prior release; there\nwas a lot of work to support our sister project EdenFS that isn't broadly\nrelevant to those outside FB at the time of writing."),(0,r.mdx)("h3",{id:"watchman-490-2017-08-24"},"Watchman 4.9.0 (2017-08-24)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"New field: ",(0,r.mdx)("inlineCode",{parentName:"li"},"content.sha1hex"),". This field expands to the SHA1 hash of the file\ncontents, expressed in hex digits (40 character hex string). Watchman\nmaintains a cache of the content hashes and can compute the hash on demand and\nalso heuristically as files are changed. This is useful for tooling that wants\nto perform more intelligent cache invalidation or build artifact fetching from\ncontent addressed storage."),(0,r.mdx)("li",{parentName:"ul"},"Experimental feature: Source Control Aware query mode. Currently supports only\nMercurial (patches to add Git support are welcomed!). SCM aware query mode\nhelps to keep response sizes closer to ",(0,r.mdx)("inlineCode",{parentName:"li"},"O(what-you-changed)")," than to\n",(0,r.mdx)("inlineCode",{parentName:"li"},"O(all-repo-changes)")," when rebasing your code. Using this feature effectively\nmay require some additional infrastructure to compute and associate data with\nrevisions from your repo."),(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue that resulted in the perf logging thread deadlocking when\n",(0,r.mdx)("inlineCode",{parentName:"li"},"perf_logger_command")," is enabled in the global configuration"),(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where queries larger than 1MB would likely result in a PDU\nerror response."),(0,r.mdx)("li",{parentName:"ul"},"Reduced lock contention for subscriptions that do no use the advanced settling\n(",(0,r.mdx)("inlineCode",{parentName:"li"},"drop"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"defer"),") options."),(0,r.mdx)("li",{parentName:"ul"},"Fixed ",(0,r.mdx)("inlineCode",{parentName:"li"},"since")," generator behavior when using unix timestamps rather than the\npreferred clock string syntax"),(0,r.mdx)("li",{parentName:"ul"},'Improved the reporting of "new" files in watchman results'),(0,r.mdx)("li",{parentName:"ul"},"Improved performance of handling changes on case insensitive filesystems"),(0,r.mdx)("li",{parentName:"ul"},"Windows: promoted from alpha to beta status!"),(0,r.mdx)("li",{parentName:"ul"},"Windows: fixed some performance and reliability issues"),(0,r.mdx)("li",{parentName:"ul"},"Windows: now operates correctly on Windows 7"),(0,r.mdx)("li",{parentName:"ul"},"Windows: can now see and report symlinks and junction points"),(0,r.mdx)("li",{parentName:"ul"},"Windows: fixed potential deadlock in trigger deletion"),(0,r.mdx)("li",{parentName:"ul"},"Windows: fixed stack trace rendering on win32"),(0,r.mdx)("li",{parentName:"ul"},"Windows: improved IO scheduling around deletes on win32"),(0,r.mdx)("li",{parentName:"ul"},"Windows: improved handling of case insensitive win32 driver letters"),(0,r.mdx)("li",{parentName:"ul"},"pywatchman: the python wheel format is used for publishing watchman pypi\npackage"),(0,r.mdx)("li",{parentName:"ul"},"pywatchman: now watchman path is configurable in python client"),(0,r.mdx)("li",{parentName:"ul"},"pywatchman: now python client can be used as a context manager"),(0,r.mdx)("li",{parentName:"ul"},"Solaris: support for Solaris has been removed. If you'd like to commit to\ntesting and maintaining Solaris support, we'd love to hear from you!")),(0,r.mdx)("h3",{id:"watchman-480-never-formally-released"},"Watchman 4.8.0 (never formally released)"),(0,r.mdx)("p",null,"Whoops, we never got around to tagging this beyond a release candidate tag!"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"New command ",(0,r.mdx)("inlineCode",{parentName:"li"},"flush-subscriptions")," to synchronize subscriptions associated with\nthe current session."),(0,r.mdx)("li",{parentName:"ul"},"On Windows, return ",(0,r.mdx)("inlineCode",{parentName:"li"},"/")," as the directory separator. Previously we used ",(0,r.mdx)("inlineCode",{parentName:"li"},"\\"),".\nThis change should be pretty neutral for clients, and makes it easier to work\nwith both the internals and the integration test infrastructure."),(0,r.mdx)("li",{parentName:"ul"},"Enforce socket Unix groups more strongly \u2014 Watchman will now refuse to start\nif it couldn't gain the right group memberships, as can happen for sites that\nare experiencing intermittent LDAP connectivity problems."),(0,r.mdx)("li",{parentName:"ul"},"pywatchman now officially supports Python 3. pywatchman will return Unicode\nstrings (possibly with surrogate escapes) by default, but can optionally\nreturn bytestrings. Note that on Python 3, pywatchman requires Watchman 4.8\nand above. The Python 2 interface and requirements remain unchanged."),(0,r.mdx)("li",{parentName:"ul"},"Prior to 4.8, methods on the Java WatchmanClient that returned\nListenableFutures would swallow exceptions and hang in an unfinished state\nunder situations like socket closure or thread death. This has been fixed, and\nnow ListenableFutures propagate exception conditions immediately. (Note that\nthis is typically unrecoverable, and users should create a new WatchmanClient\nto re-establish communication with Watchman.) See #412."),(0,r.mdx)("li",{parentName:"ul"},"The minimum Java version for the Watchman Java client has always been 1.7, but\nit was incorrectly described to be 1.6. The Java client's build file has been\nfixed accordingly."),(0,r.mdx)("li",{parentName:"ul"},"Watchman was converted from C to C++. The conversion exposed several\nconcurrency bugs, all of which have now been fixed."),(0,r.mdx)("li",{parentName:"ul"},"Subscription queries are now executed in the context of the client thread,\nwhich means that subscriptions are dispatched in parallel. Previously,\nsubscriptions would be serially dispatched and block the disk IO thread."),(0,r.mdx)("li",{parentName:"ul"},"Triggers are now dispatched in parallel and waits are managed in their own\nthreads (one thread per trigger). This improves concurrency and resolves a\ncouple of waitpid related issues where watchman may not reap spawned children\nin a timely fashion, or may spin on CPU until another child is spawned."),(0,r.mdx)("li",{parentName:"ul"},"Fixed an object lifecycle management issue that could cause a crash when aging\nout old/transient files."),(0,r.mdx)("li",{parentName:"ul"},"Implement an upgraded wire protocol, BSERv2, on the server and in pywatchman.\nBSERv2 can carry information about string encoding over the wire. This lets\npywatchman convert to Unicode strings on Python 3. Clients and servers know\nhow to transparently fall back to BSERv1."),(0,r.mdx)("li",{parentName:"ul"},"OS X: we no longer use socket activation when registering with launchd. This\nwas the source of some upgrade problems for mac Homebrew users.")),(0,r.mdx)("h3",{id:"watchman-470-2016-09-10"},"Watchman 4.7.0 (2016-09-10)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Reduced memory usage by 40%"),(0,r.mdx)("li",{parentName:"ul"},"Queries can now run with a shared lock. It is recommended that clients move\naway from the ",(0,r.mdx)("inlineCode",{parentName:"li"},"n:FOO")," style server side named cursor clockspecs to take full\nadvantage of this."),(0,r.mdx)("li",{parentName:"ul"},"Added new ",(0,r.mdx)("inlineCode",{parentName:"li"},"glob")," generator as a walking strategy for queries. This allows\nwatchman to evaluate globs in the most efficient manner. Our friends in the\nBuck project have already integrated this into their ",(0,r.mdx)("inlineCode",{parentName:"li"},"BUCK")," file parsing to\nevaluate globs without touching the filesystem!"),(0,r.mdx)("li",{parentName:"ul"},"Added ",(0,r.mdx)("inlineCode",{parentName:"li"},'"case_sensitive": true')," option to queries to force matches to happen in\na case sensitive manner, even if the watched root is on a case insensitive\nfilesystem. This is used to accelerate certain types of internal traversal: if\nwe know that a path is case sensitive we can perform an ",(0,r.mdx)("inlineCode",{parentName:"li"},"O(1)")," lookup where we\nwould otherwise have to perform an ",(0,r.mdx)("inlineCode",{parentName:"li"},"O(number-of-directory-entries)")," scan and\ncompare."),(0,r.mdx)("li",{parentName:"ul"},"Fixed a race condition during subscription initiation that could emit\nincorrect clock values."),(0,r.mdx)("li",{parentName:"ul"},"Fixed spurious over-notification for parent directories of changed files on\nMac."),(0,r.mdx)("li",{parentName:"ul"},"Fixed some reliability issues on Windows")),(0,r.mdx)("h3",{id:"watchman-460-2016-07-09"},"Watchman 4.6.0 (2016-07-09)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Improved I/O scheduling when processing recursive deletes and deep directory\nrename operations."),(0,r.mdx)("li",{parentName:"ul"},"Improved performance of the ",(0,r.mdx)("inlineCode",{parentName:"li"},"ignore_dirs")," configuration option on OS X and\nWindows systems. We take advantage of an undocumented (but supported!) API to\nfurther accelerate this for the first 8 entries in the ",(0,r.mdx)("inlineCode",{parentName:"li"},"ignore_dirs")," on OS X.\nUsers that depend on this configuration to avoid recrawls will want to review\nand prioritize their most active build dirs to the front of the ",(0,r.mdx)("inlineCode",{parentName:"li"},"ignore_dirs"),"\nspecified in their ",(0,r.mdx)("inlineCode",{parentName:"li"},".watchmanconfig")," file."),(0,r.mdx)("li",{parentName:"ul"},"Added an optional recrawl recovery strategy for OS X that will attempt to\nresync from the fseventsd journal rather than performing a full filesystem\nwalk. This is currently disabled by default but will likely be enabled by\ndefault in the next Watchman release. You can enable this by setting\n",(0,r.mdx)("inlineCode",{parentName:"li"},"fsevents_try_resync: true")," in either ",(0,r.mdx)("inlineCode",{parentName:"li"},"/etc/watchman.json")," or your\n",(0,r.mdx)("inlineCode",{parentName:"li"},".watchmanconfig"),". This should reduce the frequency of recrawl warnings for\nsome users/workloads, and also improves I/O for users with extremely large\ntrees."),(0,r.mdx)("li",{parentName:"ul"},"Fixed accidental exponential time complexity issue with recursive deletes and\ndeep directory rename operations on case-insensitive filesystems (such as OS\nX). This manifested as high CPU utilization for extended periods of time."),(0,r.mdx)("li",{parentName:"ul"},"Added support for allowing non-owner access to a Watchman instance. Only the\nowner is authorized to create or delete watches. Non-owners can view\ninformation about existing watches. Access control is based on unix domain\nsocket permissions. The new but not yet documented configuration options\n",(0,r.mdx)("inlineCode",{parentName:"li"},"sock_group")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},"sock_access")," can be used to control this new behavior."),(0,r.mdx)("li",{parentName:"ul"},"Added support for inetd-style socket activation of the watchman service.\n",(0,r.mdx)("a",{parentName:"li",href:"https://github.com/facebook/watchman/commit/2985377eaf8c8538b28fae9add061b67991a87c2"},"this commit includes a sample configuration for systemd"),"."),(0,r.mdx)("li",{parentName:"ul"},"Added the ",(0,r.mdx)("inlineCode",{parentName:"li"},"symlink_target")," field to the stored metadata for files. This holds\nthe text of the symbolic link for symlinks. You can test whether it is\nsupported by a watchman server using the capability name\n",(0,r.mdx)("inlineCode",{parentName:"li"},"field-symlink_target"),"."),(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where watchman may not reap child processes spawned by\ntriggers."),(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where watchman may block forever during shutdown if there are\nother connected clients."),(0,r.mdx)("li",{parentName:"ul"},"Added ",(0,r.mdx)("inlineCode",{parentName:"li"},"hint_num_dirs")," configuration option.")),(0,r.mdx)("h3",{id:"pywatchman-140---"},"pywatchman 1.4.0 (????-??-??)"),(0,r.mdx)("p",null,"(These changes have not yet been released to pypi)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Added immutable version of data results to bser. This is cheaper to build from\na serialized bser representation than the mutable version and is better suited\nto large result sets received from watchman."),(0,r.mdx)("li",{parentName:"ul"},"Fixed a number of misc. portability issues"),(0,r.mdx)("li",{parentName:"ul"},"Added Python 3.x support")),(0,r.mdx)("h3",{id:"watchman-450-2016-02-18"},"Watchman 4.5.0 (2016-02-18)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Fixed an inotify race condition for non-atomic directory replacements that was\nintroduced in Watchman 4.4.")),(0,r.mdx)("h3",{id:"watchman-440-2016-02-02"},"Watchman 4.4.0 (2016-02-02)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Added state-enter and state-leave commands can allow subscribers to more\nintelligently settle/coalesce events around hg update or builds."),(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where subscriptions could double-notify for the same events."),(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where subscriptions that never match any files add\nO(all-observed-files) CPU cost to every subscription dispatch")),(0,r.mdx)("h3",{id:"watchman-430-2015-12-14"},"Watchman 4.3.0 (2015-12-14)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Improved handling of case insensitive renames; halved the memory usage and\ndoubled crawl speed on OS X.")),(0,r.mdx)("h3",{id:"watchman-420-2015-12-08"},"Watchman 4.2.0 (2015-12-08)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Increased strictness of checks for symlinks; rather than just checking whether\nthe leaf of a directory tree is a symlink, we now check each component down\nfrom the root of the watch. This improves detection and processing for\ndirectory-to-symlink (and vice versa) transitions."),(0,r.mdx)("li",{parentName:"ul"},"Increased priority of the watchman process on OS X.")),(0,r.mdx)("h3",{id:"pywatchman-130-2015-10-22"},"pywatchman 1.3.0 (2015-10-22)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Added ",(0,r.mdx)("inlineCode",{parentName:"li"},"watchman-make")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},"watchman-wait")," commands"),(0,r.mdx)("li",{parentName:"ul"},"Added pure python implementation of BSER")),(0,r.mdx)("h3",{id:"watchman-410-2015-10-20"},"Watchman 4.1.0 (2015-10-20)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where symlink size was always reported as 0 on OS X using the\nnew bulkstat functionality")),(0,r.mdx)("h3",{id:"watchman-400-2015-10-19"},"Watchman 4.0.0 (2015-10-19)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where a directory that was replaced by a symlink would cause a\nsymlink traversal instead of correctly updating the type of the node and\nmarking the children removed."),(0,r.mdx)("li",{parentName:"ul"},"Fixed a debugging log line that was emitted at the wrong log level on every\ndirectory traversal.")),(0,r.mdx)("h3",{id:"watchman-390-2015-10-12"},"Watchman 3.9.0 (2015-10-12)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where dir renames on OS X could cause us to lose track of the\nfiles inside the renamed dir"),(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where dir deletes and replacements on Linux could cause us to\nlose track of the files inside the replaced dir (similar to the OS X issue\nabove in manifestation, but a different root cause)."),(0,r.mdx)("li",{parentName:"ul"},"Improved (re)crawl speed for dirs with more than a couple of entries on\naverage (improvement can be up to 5x for dirs with up to 64 entries on\naverage). You may now tune the ",(0,r.mdx)("inlineCode",{parentName:"li"},"hint_num_files_per_dir")," setting in your\n",(0,r.mdx)("inlineCode",{parentName:"li"},".watchmanconfig")," to better match your tree.\n",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/config#hint_num_files_per_dir"},"More details")),(0,r.mdx)("li",{parentName:"ul"},"Improved (re)crawl speed on OS X 10.10 and later by using ",(0,r.mdx)("inlineCode",{parentName:"li"},"getattrlistbulk"),".\nThis allows us to improve the data:syscall ratio during crawling and can\nimprove throughput by up to 40% for larger trees."),(0,r.mdx)("li",{parentName:"ul"},"Add optional ",(0,r.mdx)("inlineCode",{parentName:"li"},"sync_timeout")," to the ",(0,r.mdx)("inlineCode",{parentName:"li"},"clock")," command"),(0,r.mdx)("li",{parentName:"ul"},"Avoid accidentally passing descriptors other than the stdio streams when we\nspawn the watchman service."),(0,r.mdx)("li",{parentName:"ul"},"Fixed a race condition where we could start two sets of watcher threads for\nthe same dir if two clients issue a ",(0,r.mdx)("inlineCode",{parentName:"li"},"watch")," or ",(0,r.mdx)("inlineCode",{parentName:"li"},"watch-project")," at the same\ntime"),(0,r.mdx)("li",{parentName:"ul"},"Added a helpful error for a tmux + launchd issue on OS X")),(0,r.mdx)("h3",{id:"watchman-380-2015-09-14"},"Watchman 3.8.0 (2015-09-14)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Improved latency of processing kernel notifications. It should now be far less\nlikely to run into an notification queue overflow."),(0,r.mdx)("li",{parentName:"ul"},"Improved idle behavior. There were a couple of places where watchman would\nwake up more often than was strictly needed and these have now been fixed.\nThis is mostly of interest to laptop users on battery power."),(0,r.mdx)("li",{parentName:"ul"},"Improved inotify move tracking. Some move operations could cause watchman to\nbecome confused and trigger a recrawl. This has now been resolved."),(0,r.mdx)("li",{parentName:"ul"},"Hardened statedir and permissions. There was a possibility of a symlink attack\nand this has now been mitigated by re-structuring the statedir layout."),(0,r.mdx)("li",{parentName:"ul"},"Fixed a possible deadlock in the idle watch reaper"),(0,r.mdx)("li",{parentName:"ul"},"Fixed an issue where the watchman -p log-level debug could drop log\nnotifications in the CLI"),(0,r.mdx)("li",{parentName:"ul"},"Disabled the IO-throttling-during-crawl that we added in 3.7. It proved to be\nmore harmful than beneficial."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"-j")," CLI option now accepts either JSON or BSER encoded command on stdin"),(0,r.mdx)("li",{parentName:"ul"},"Added ",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/capabilities"},"capabilities")," to the server, and added the\n",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/cmd/version#capabilityCheck"},"capabilityCheck")," method to the python and\nnode clients.")),(0,r.mdx)("h3",{id:"pywatchman-120-2015-08-15"},"pywatchman 1.2.0 (2015-08-15)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Added the ",(0,r.mdx)("inlineCode",{parentName:"li"},"capabilityCheck")," method"),(0,r.mdx)("li",{parentName:"ul"},"Added ",(0,r.mdx)("inlineCode",{parentName:"li"},"SocketTimeout")," exception to distinguish timeouts from protocol level\nexceptions")),(0,r.mdx)("h3",{id:"fb-watchman-130-for-node-2015-08-15"},"fb-watchman 1.3.0 for node (2015-08-15)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Added the ",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/nodejs#checking-for-watchman-availability"},"capabilityCheck"),"\nmethod.")),(0,r.mdx)("h3",{id:"pywatchman-100-2015-08-06"},"pywatchman 1.0.0 (2015-08-06)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"First official pypi release, thanks to ",(0,r.mdx)("a",{parentName:"li",href:"https://github.com/kwlzn"},"@kwlzn")," for\nsetting up the release machinery for this.")),(0,r.mdx)("h3",{id:"watchman-370-2015-08-05"},"Watchman 3.7.0 (2015-08-05)"),(0,r.mdx)("p",null,"(Watchman 3.6.0 wasn't formally released)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Fixed bug where ",(0,r.mdx)("inlineCode",{parentName:"li"},"query match")," on ",(0,r.mdx)("inlineCode",{parentName:"li"},"foo*.java")," with ",(0,r.mdx)("inlineCode",{parentName:"li"},"wholename")," scope would\nincorrectly match ",(0,r.mdx)("inlineCode",{parentName:"li"},"foo/bar/baz.java"),"."),(0,r.mdx)("li",{parentName:"ul"},"Added ",(0,r.mdx)("inlineCode",{parentName:"li"},"src/**/*.java")," recursive glob pattern support to ",(0,r.mdx)("inlineCode",{parentName:"li"},"query match"),"."),(0,r.mdx)("li",{parentName:"ul"},"Added options dictionary to ",(0,r.mdx)("inlineCode",{parentName:"li"},"query"),"'s ",(0,r.mdx)("inlineCode",{parentName:"li"},"match")," operator."),(0,r.mdx)("li",{parentName:"ul"},"Added ",(0,r.mdx)("inlineCode",{parentName:"li"},"includedotfiles")," option to ",(0,r.mdx)("inlineCode",{parentName:"li"},"query match")," to include files whose names\nstart with ",(0,r.mdx)("inlineCode",{parentName:"li"},"."),"."),(0,r.mdx)("li",{parentName:"ul"},"Added ",(0,r.mdx)("inlineCode",{parentName:"li"},"noescape")," option to ",(0,r.mdx)("inlineCode",{parentName:"li"},"query match")," to make ",(0,r.mdx)("inlineCode",{parentName:"li"},"\\")," match literal ",(0,r.mdx)("inlineCode",{parentName:"li"},"\\"),"."),(0,r.mdx)("li",{parentName:"ul"},"We'll now automatically age out and stop watches. See\n",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/config#idle_reap_age_seconds"},"idle_reap_age_seconds")," for more information."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"watch-project")," will now try harder to re-use an existing watch and avoid\ncreating an overlapping watch."),(0,r.mdx)("li",{parentName:"ul"},"Reduce I/O priority during crawling on systems that support this"),(0,r.mdx)("li",{parentName:"ul"},"Fixed issue with the ",(0,r.mdx)("inlineCode",{parentName:"li"},"long long")," data type in the python BSER module")),(0,r.mdx)("h3",{id:"fb-watchman-120-for-node-2015-07-11"},"fb-watchman 1.2.0 for node (2015-07-11)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Updated the node client to more gracefully handle ",(0,r.mdx)("inlineCode",{parentName:"li"},"undefined")," values in\nobjects when serializing them; we now omit keys whose values are ",(0,r.mdx)("inlineCode",{parentName:"li"},"undefined"),"\nrather than throw an exception.")),(0,r.mdx)("h3",{id:"watchman-350-2015-06-29"},"Watchman 3.5.0 (2015-06-29)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Fix the version number reported by watchman.")),(0,r.mdx)("h3",{id:"watchman-340-2015-06-29"},"Watchman 3.4.0 (2015-06-29)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"trigger")," now supports an optional ",(0,r.mdx)("inlineCode",{parentName:"li"},"relative_root")," argument. The trigger is\nevaluated with respect to this subdirectory. See\n",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/cmd/trigger#relative-roots"},"trigger")," for more.")),(0,r.mdx)("h3",{id:"fb-watchman-110-for-node-2015-06-25"},"fb-watchman 1.1.0 for node (2015-06-25)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Updated the node client to handle 64-bit integer values using the\n",(0,r.mdx)("a",{parentName:"li",href:"https://www.npmjs.com/package/node-int64"},"node-int64"),". These are most likely\nto show up if your query fields include ",(0,r.mdx)("inlineCode",{parentName:"li"},"size")," and you have files larger than\n2GB in your watched root.")),(0,r.mdx)("h3",{id:"fb-watchman-100-for-node-2015-06-23"},"fb-watchman 1.0.0 for node (2015-06-23)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"Updated the node client to support ",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/bser"},"BSER")," encoding, fixing a\nquadratic performance issue in the JSON stream decoder that was used\npreviously.")),(0,r.mdx)("h3",{id:"watchman-330-2015-06-22"},"Watchman 3.3.0 (2015-06-22)"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"query")," and ",(0,r.mdx)("inlineCode",{parentName:"li"},"subscribe")," now support an optional ",(0,r.mdx)("inlineCode",{parentName:"li"},"relative_root")," argument.\nInputs and outputs are evaluated with respect to this subdirectory. See\n",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/file-query#relative-roots"},"File Queries")," for more.")))}u.isMDXComponent=!0}}]);