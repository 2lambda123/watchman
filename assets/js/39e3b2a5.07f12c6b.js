"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[3594],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return d},MDXProvider:function(){return p},mdx:function(){return f},useMDXComponents:function(){return c},withMDXComponents:function(){return m}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var d=a.createContext({}),m=function(e){return function(n){var t=c(n.components);return a.createElement(e,i({},n,{components:t}))}},c=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,r=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=c(t),p=o,h=m["".concat(r,".").concat(p)]||m[p]||u[p]||i;return t?a.createElement(h,s(s({ref:n},d),{},{components:t})):a.createElement(h,s({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},1242:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var a=t(83117),o=t(80102),i=(t(67294),t(3905)),r=["components"],s={title:"Command Line",category:"Invocation",sidebar_position:1},l=void 0,d={unversionedId:"cli-options",id:"cli-options",title:"Command Line",description:"The watchman executable contains both the client and the server components of",source:"@site/docs/cli-options.md",sourceDirName:".",slug:"/cli-options",permalink:"/watchman/docs/cli-options",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/cli-options.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Command Line",category:"Invocation",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Release Notes",permalink:"/watchman/docs/release-notes"},next:{title:"watchman-make",permalink:"/watchman/docs/watchman-make"}},m={},c=[{value:"Quick note on default locations",id:"quick-note-on-default-locations",level:2},{value:"Locating the service",id:"locating-the-service",level:2},{value:"Client Options",id:"client-options",level:2},{value:"Input and Output",id:"input-and-output",level:3},{value:"Exit Status",id:"exit-status",level:2},{value:"Server Options",id:"server-options",level:2}],p={toc:c};function u(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.mdx)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"watchman")," executable contains both the client and the server components of\nthe watchman service."),(0,i.mdx)("p",null,"By default, when ",(0,i.mdx)("inlineCode",{parentName:"p"},"watchman")," is run, it will attempt to communicate with your\nexisting server instance (each user has their own persistent process), and will\nattempt to start it if it doesn't exist."),(0,i.mdx)("p",null,"There are some options that affect how ",(0,i.mdx)("inlineCode",{parentName:"p"},"watchman")," will locate the server, some\noptions that affect only the client and some others that affect only the server.\nSince all of the options are understood by the same executable we've broken\nthose out into sections of their own to make it clearer when they apply."),(0,i.mdx)("h2",{id:"quick-note-on-default-locations"},"Quick note on default locations"),(0,i.mdx)("p",null,"Watchman will prefer to resolve your user name from the ",(0,i.mdx)("inlineCode",{parentName:"p"},"$USER")," environmental\nvariable, or ",(0,i.mdx)("inlineCode",{parentName:"p"},"$LOGNAME")," if ",(0,i.mdx)("inlineCode",{parentName:"p"},"$USER")," was not set. If neither are set watchman will\nlook it up from the system using ",(0,i.mdx)("inlineCode",{parentName:"p"},"getpwuid(getuid())"),". When we refer to ",(0,i.mdx)("inlineCode",{parentName:"p"},"<USER>"),"\nin this documentation we mean the result of this resolution."),(0,i.mdx)("p",null,"In some cases Watchman will need to create files in a temporary location.\nWatchman will resolve this temporary location by looking at the ",(0,i.mdx)("inlineCode",{parentName:"p"},"$TMPDIR"),"\nenvironmental variable, or ",(0,i.mdx)("inlineCode",{parentName:"p"},"$TMP")," if ",(0,i.mdx)("inlineCode",{parentName:"p"},"$TMPDIR")," was not set. If neither are set\nwatchman will use ",(0,i.mdx)("inlineCode",{parentName:"p"},"/tmp"),". When we refer to ",(0,i.mdx)("inlineCode",{parentName:"p"},"<TMPDIR>")," in this documentation we\nmean the result of this resolution."),(0,i.mdx)("p",null,"Watchman tracks its persistent state in a location that we refer to as the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"<STATEDIR>")," in this documentation."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Since 3.1.")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"STATEDIR")," defaulted to ",(0,i.mdx)("inlineCode",{parentName:"p"},"<PREFIX>/var/run/watchman"),". You can change this\ndefault when you build watchman by using the configure option\n",(0,i.mdx)("inlineCode",{parentName:"p"},"--enable-statedir"),"."),(0,i.mdx)("p",null,"Earlier versions of Watchman didn't have a default statedir and would instead\nuse the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<TMPDIR>")," for this state. We switched away from that because some\nenvironments randomize the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<TMPDIR>")," location and this made it difficult for\nclients to locate the Watchman service."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Since 3.8.")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"STATEDIR")," defaults to ",(0,i.mdx)("inlineCode",{parentName:"p"},"<PREFIX>/var/run/watchman/<USER>-state"),". You can\nchange this default when you build watchman by using the configure option\n",(0,i.mdx)("inlineCode",{parentName:"p"},"--enable-statedir"),"; the configure option replaces the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"<PREFIX>/var/run/watchman")," portion of this string. If you specify\n",(0,i.mdx)("inlineCode",{parentName:"p"},"--disable-statedir")," then that portion of the string will be computed from the\n",(0,i.mdx)("inlineCode",{parentName:"p"},"<TMPDIR>")," location."),(0,i.mdx)("p",null,"Watchman will create the ",(0,i.mdx)("inlineCode",{parentName:"p"},"<USER>-state")," portion if it does not exist, and will\nperform some permission and ownership checks to reduce the risk of untrusted\nusers placing files in this location. If those checks are not satisfied,\nwatchman will refuse to start."),(0,i.mdx)("h2",{id:"locating-the-service"},"Locating the service"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"}," -U, --sockname=PATH   Specify alternate sockname\n")),(0,i.mdx)("p",null,"The default location for sockname will be ",(0,i.mdx)("inlineCode",{parentName:"p"},"<STATEDIR>/<USER>"),". Older versions of\nWatchman would default to ",(0,i.mdx)("inlineCode",{parentName:"p"},"<TMPDIR>/.watchman.<USER>"),", depending on how it was\nconfigured."),(0,i.mdx)("p",null,"If you are building a client to access the service programmatically, we\nrecommend that you invoke ",(0,i.mdx)("a",{parentName:"p",href:"/watchman/docs/cmd/get-sockname"},"watchman get-sockname")," to\ndiscover the path that the client and server would use. This has the side effect\nof spawning the service for you if it isn't already running."),(0,i.mdx)("h2",{id:"client-options"},"Client Options"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"watchman")," executable will attempt to start the service if there is no\nresponse on the socket specified above. In some cases it is desirable to avoid\nstarting the service if it isn't running:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"}," --no-spawn            Don't spawn service if it is not already running.\n                       Will try running the command in client mode if\n                       possible.\n --no-local            When no-spawn is enabled, don't use client mode\n")),(0,i.mdx)("p",null,"Client mode implements the ",(0,i.mdx)("a",{parentName:"p",href:"/watchman/docs/cmd/find"},"watchman find command")," as an immediate\nsearch."),(0,i.mdx)("p",null,"These options control how the client talks to the server:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"}," -p, --persistent           Persist and wait for further responses\n     --server-encoding=ARG  CLI<->server encoding. json or bser.\n")),(0,i.mdx)("p",null,"Persistent connections have relatively limited use with the CLI, but can be\nuseful to connect ad-hoc to the service to receive logging information (See\n",(0,i.mdx)("a",{parentName:"p",href:"/watchman/docs/cmd/log-level"},"log-level"),")."),(0,i.mdx)("p",null,"The server encoding option controls how requests and responses are formatted\nwhen talking to the server. You generally shouldn't need to worry about this."),(0,i.mdx)("h3",{id:"input-and-output"},"Input and Output"),(0,i.mdx)("p",null,"Most simple invocations of the CLI will pass a list of arguments:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"$ watchman watch /path/to/dir\n")),(0,i.mdx)("p",null,"This is turned into a request like this:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'["watch", "/path/to/dir"]\n')),(0,i.mdx)("p",null,"and sent to the service using the ",(0,i.mdx)("a",{parentName:"p",href:"/watchman/docs/socket-interface"},"Socket Interface"),"."),(0,i.mdx)("p",null,"The response is received and then sent to the ",(0,i.mdx)("inlineCode",{parentName:"p"},"stdout")," stream formatted based on\nthe selected output-encoding:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"     --output-encoding=ARG  CLI output encoding. json (default) or bser\n     --no-pretty            Don't pretty print JSON output (more efficient\n                            when being processed by another program)\n")),(0,i.mdx)("p",null,"Each command has its own response output but watchman will always include a\nfield named ",(0,i.mdx)("inlineCode",{parentName:"p"},"error")," if something about the request was not successful. In case\nof some protocol level errors (eg: connection was terminated) instead of\nprinting a response on ",(0,i.mdx)("inlineCode",{parentName:"p"},"stdout"),", an unstructured error message will be printed\nto ",(0,i.mdx)("inlineCode",{parentName:"p"},"stderr")," and the process will exit with a non-zero exit status."),(0,i.mdx)("p",null,"Instead of passing the request as command line parameters, you can send a JSON\nrepresentation on the ",(0,i.mdx)("inlineCode",{parentName:"p"},"stdin")," stream. These invocations are all equivalent:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},"$ watchman watch /path/to/dir\n")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},'$ watchman -j <<-EOT\n["watch", "/path/to/dir"]\nEOT\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},'$ watchman -j <<< \'["watch", "/path/to/dir"]\'\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},'$ echo \'["watch", "/path/to/dir"]\' | watchman -j\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},'$ echo \'["watch", "/path/to/dir"]\' > cmd.json\n$ watchman -j < cmd.json\n')),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-bash"},'$ watchman --json-command <<-EOT\n["watch", "/path/to/dir"]\nEOT\n')),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Since 3.8")),(0,i.mdx)("p",null,"The CLI now also recognizes BSER as a valid input stream when using the ",(0,i.mdx)("inlineCode",{parentName:"p"},"-j"),"\noption. This will implicitly set ",(0,i.mdx)("inlineCode",{parentName:"p"},"--server-encoding=bser")," and\n",(0,i.mdx)("inlineCode",{parentName:"p"},"--output-encoding=bser")," if those options have not been set to something else."),(0,i.mdx)("h2",{id:"exit-status"},"Exit Status"),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"watchman")," binary will exit with a return code of 0 in most cases; this\nindicates that the output it generated should be valid JSON. To determine if\nyour command was successful, you need to parse the JSON and look for the ",(0,i.mdx)("inlineCode",{parentName:"p"},"error"),"\nfield as described above."),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"watchman")," will exit with a non-zero exit status in cases where something\nlow-level went wrong, such as protocol level errors (eg: connection was\nterminated)."),(0,i.mdx)("h2",{id:"server-options"},"Server Options"),(0,i.mdx)("p",null,"These options are used when starting the server. They are recognized by the\nclient and affect how it will start the server, but have no effect if the server\nis already running. To change the effective values of these options for a\nrunning server, you will need to restart it (you can stop it by running\n",(0,i.mdx)("a",{parentName:"p",href:"/watchman/docs/cmd/shutdown-server"},"watchman shutdown-server"),")."),(0,i.mdx)("p",null,"By default, watchman will remember all watches and associated triggers and\nreinstate them if the process is restarted. This state is stored in the\n",(0,i.mdx)("em",{parentName:"p"},"statefile"),":"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"}," --statefile=PATH      Specify path to file to hold watch and trigger state\n -n, --no-save-state   Don't save state between invocations\n")),(0,i.mdx)("p",null,"The default location for statefile will be ",(0,i.mdx)("inlineCode",{parentName:"p"},"<STATEDIR>/<USER>.state"),". Older\nversions of watchman may store the state in ",(0,i.mdx)("inlineCode",{parentName:"p"},"<TMPDIR>/.watchman.<USER>.state"),",\ndepending on how they were configured."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"-o, --logfile=PATH   Specify path to logfile\n    --log-level      set log verbosity (0 = off, default is 1, verbose = 2)\n")),(0,i.mdx)("p",null,"The default location for logfile will be ",(0,i.mdx)("inlineCode",{parentName:"p"},"<STATEDIR>/<USER>.log"),". Older versions\nof watchman may store the logs in ",(0,i.mdx)("inlineCode",{parentName:"p"},"<TMPDIR>/.watchman.<USER>.log"),", depending on\nhow they were configured."),(0,i.mdx)("p",null,"In some relatively uncommon circumstances, such as in test harnesses, you may\nneed to directly run the service without it putting itself into the background:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"}," -f, --foreground      Run the service in the foreground\n")),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Since 4.6.")),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},"     --inetd                Spawning from an inetd style supervisor\n")),(0,i.mdx)("p",null,"When this flag is specified, watchman will use stdin as the listening socket\nrather than attempting to set it up for itself. This allows some other process\nto maintain the socket and defer activating the watchman service until a client\nis ready to connect. This is most practically beneficial when used together with\n",(0,i.mdx)("inlineCode",{parentName:"p"},"systemd"),"."),(0,i.mdx)("p",null,(0,i.mdx)("a",{parentName:"p",href:"https://github.com/facebook/watchman/commit/2985377eaf8c8538b28fae9add061b67991a87c2"},"This commit includes a sample configuration for systemd"),"."))}u.isMDXComponent=!0}}]);