"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[4446],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return s},MDXProvider:function(){return c},mdx:function(){return f},useMDXComponents:function(){return p},withMDXComponents:function(){return m}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),m=function(e){return function(n){var t=p(n.components);return a.createElement(e,r({},n,{components:t}))}},p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),m=p(t),c=i,h=m["".concat(o,".").concat(c)]||m[c]||u[c]||r;return t?a.createElement(h,l(l({ref:n},s),{},{components:t})):a.createElement(h,l({ref:n},s))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=h;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},55142:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return d},default:function(){return u},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var a=t(83117),i=t(80102),r=(t(67294),t(3905)),o=["components"],l={title:"Configuration Files",category:"Invocation",sidebar_position:7},d=void 0,s={unversionedId:"config",id:"config",title:"Configuration Files",description:"Watchman looks for configuration files in two places:",source:"@site/docs/config.md",sourceDirName:".",slug:"/config",permalink:"/watchman/docs/config",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/config.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"Configuration Files",category:"Invocation",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"NodeJS",permalink:"/watchman/docs/nodejs"},next:{title:"Socket Interface",permalink:"/watchman/docs/socket-interface"}},m={},p=[{value:"Resolution / Scoping",id:"resolution--scoping",level:3},{value:"Configuration Options",id:"configuration-options",level:3},{value:"settle",id:"settle",level:3},{value:"root_files",id:"root_files",level:3},{value:"enforce_root_files",id:"enforce_root_files",level:3},{value:"root_restrict_files",id:"root_restrict_files",level:3},{value:"illegal_fstypes",id:"illegal_fstypes",level:3},{value:"ignore_vcs",id:"ignore_vcs",level:3},{value:"ignore_dirs",id:"ignore_dirs",level:3},{value:"gc_age_seconds",id:"gc_age_seconds",level:3},{value:"gc_interval_seconds",id:"gc_interval_seconds",level:3},{value:"fsevents_latency",id:"fsevents_latency",level:3},{value:"fsevents_try_resync",id:"fsevents_try_resync",level:3},{value:"prefer_split_fsevents_watcher",id:"prefer_split_fsevents_watcher",level:3},{value:"idle_reap_age_seconds",id:"idle_reap_age_seconds",level:3},{value:"hint_num_files_per_dir",id:"hint_num_files_per_dir",level:3},{value:"hint_num_dirs",id:"hint_num_dirs",level:3},{value:"suppress_recrawl_warnings",id:"suppress_recrawl_warnings",level:3},{value:"eden_file_count_threshold_for_fresh_instance",id:"eden_file_count_threshold_for_fresh_instance",level:3}],c={toc:p};function u(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.mdx)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,"Watchman looks for configuration files in two places:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"The global configuration file ",(0,r.mdx)("inlineCode",{parentName:"li"},"/etc/watchman.json")),(0,r.mdx)("li",{parentName:"ul"},"The root specific configuration file ",(0,r.mdx)("inlineCode",{parentName:"li"},".watchmanconfig"))),(0,r.mdx)("p",null,"When watching a root, if a valid JSON file named ",(0,r.mdx)("inlineCode",{parentName:"p"},".watchmanconfig")," is present in\nthe root directory, watchman will load it and use it as a source of\nconfiguration information specific to that root."),(0,r.mdx)("p",null,"The global configuration path can be changed by passing the ",(0,r.mdx)("inlineCode",{parentName:"p"},"--enable-conffile"),"\noption to configure when you build watchman. This documentation refers to it as\n",(0,r.mdx)("inlineCode",{parentName:"p"},"/etc/watchman.json")," throughout, just be aware that your particular installation\nmay locate it elsewhere. In addition, the environmental variable\n",(0,r.mdx)("inlineCode",{parentName:"p"},"$WATCHMAN_CONFIG_FILE")," will override the default location."),(0,r.mdx)("p",null,'If the global configuration file does not exist, Watchman will fall back on that\npath with ".default" appended (e.g. /etc/watchman.json.default). This allows the\nWatchman system package to provide different configuration defaults, like\nsetting enforce_root_files to true.'),(0,r.mdx)("p",null,"Changes to the ",(0,r.mdx)("inlineCode",{parentName:"p"},".watchmanconfig")," or ",(0,r.mdx)("inlineCode",{parentName:"p"},"/etc/watchman.json")," files are not picked up\nautomatically; you will need to remove and re-add the watch (for\n",(0,r.mdx)("inlineCode",{parentName:"p"},".watchmanconfig"),") or restart watchman (for ",(0,r.mdx)("inlineCode",{parentName:"p"},"/etc/watchman.json"),") for those\nchanges to take effect."),(0,r.mdx)("h3",{id:"resolution--scoping"},"Resolution / Scoping"),(0,r.mdx)("p",null,"There are three configuration scopes:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"local")," - the option value is read from the ",(0,r.mdx)("inlineCode",{parentName:"li"},".watchmanconfig")," file in the\nassociated root."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"global")," - the option value is read from the ",(0,r.mdx)("inlineCode",{parentName:"li"},"/etc/watchman.json")," file"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("strong",{parentName:"li"},"fallback")," - the option value is read from the ",(0,r.mdx)("inlineCode",{parentName:"li"},".watchmanconfig")," file. If\nthe option was not present in the ",(0,r.mdx)("inlineCode",{parentName:"li"},".watchmanconfig")," file, then read it from\nthe ",(0,r.mdx)("inlineCode",{parentName:"li"},"/etc/watchman.json")," file.")),(0,r.mdx)("p",null,"This table shows the scoping and availability of the various options:"),(0,r.mdx)("table",null,(0,r.mdx)("thead",{parentName:"table"},(0,r.mdx)("tr",{parentName:"thead"},(0,r.mdx)("th",{parentName:"tr",align:null},"Option"),(0,r.mdx)("th",{parentName:"tr",align:null},"Scope"),(0,r.mdx)("th",{parentName:"tr",align:null},"Since version"))),(0,r.mdx)("tbody",{parentName:"table"},(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"settle")),(0,r.mdx)("td",{parentName:"tr",align:null},"local"),(0,r.mdx)("td",{parentName:"tr",align:null})),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"root_restrict_files")),(0,r.mdx)("td",{parentName:"tr",align:null},"global"),(0,r.mdx)("td",{parentName:"tr",align:null},"deprecated in 3.1")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"root_files")),(0,r.mdx)("td",{parentName:"tr",align:null},"global"),(0,r.mdx)("td",{parentName:"tr",align:null},"3.1")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"enforce_root_files")),(0,r.mdx)("td",{parentName:"tr",align:null},"global"),(0,r.mdx)("td",{parentName:"tr",align:null},"3.1")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"illegal_fstypes")),(0,r.mdx)("td",{parentName:"tr",align:null},"global"),(0,r.mdx)("td",{parentName:"tr",align:null},"2.9.8")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"illegal_fstypes_advice")),(0,r.mdx)("td",{parentName:"tr",align:null},"global"),(0,r.mdx)("td",{parentName:"tr",align:null},"2.9.8")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"ignore_vcs")),(0,r.mdx)("td",{parentName:"tr",align:null},"local"),(0,r.mdx)("td",{parentName:"tr",align:null},"2.9.3")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"ignore_dirs")),(0,r.mdx)("td",{parentName:"tr",align:null},"local"),(0,r.mdx)("td",{parentName:"tr",align:null},"2.9.3")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"gc_age_seconds")),(0,r.mdx)("td",{parentName:"tr",align:null},"local"),(0,r.mdx)("td",{parentName:"tr",align:null},"2.9.4")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"gc_interval_seconds")),(0,r.mdx)("td",{parentName:"tr",align:null},"local"),(0,r.mdx)("td",{parentName:"tr",align:null},"2.9.4")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"fsevents_latency")),(0,r.mdx)("td",{parentName:"tr",align:null},"fallback"),(0,r.mdx)("td",{parentName:"tr",align:null},"3.2")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"idle_reap_age_seconds")),(0,r.mdx)("td",{parentName:"tr",align:null},"local"),(0,r.mdx)("td",{parentName:"tr",align:null},"3.7")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"hint_num_files_per_dir")),(0,r.mdx)("td",{parentName:"tr",align:null},"fallback"),(0,r.mdx)("td",{parentName:"tr",align:null},"3.9")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"hint_num_dirs")),(0,r.mdx)("td",{parentName:"tr",align:null},"fallback"),(0,r.mdx)("td",{parentName:"tr",align:null},"4.6")),(0,r.mdx)("tr",{parentName:"tbody"},(0,r.mdx)("td",{parentName:"tr",align:null},(0,r.mdx)("inlineCode",{parentName:"td"},"suppress_recrawl_warnings")),(0,r.mdx)("td",{parentName:"tr",align:null},"fallback"),(0,r.mdx)("td",{parentName:"tr",align:null},"4.7")))),(0,r.mdx)("h3",{id:"configuration-options"},"Configuration Options"),(0,r.mdx)("h3",{id:"settle"},"settle"),(0,r.mdx)("p",null,"Specifies the settle period in ",(0,r.mdx)("em",{parentName:"p"},"milliseconds"),". This controls how long the\nfilesystem should be idle before dispatching triggers. The default value is 20\nmilliseconds."),(0,r.mdx)("h3",{id:"root_files"},"root_files"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 3.1.")),(0,r.mdx)("p",null,"Specifies a list of files that, if present in a directory, identify that\ndirectory as the root of a project."),(0,r.mdx)("p",null,"If left unspecified, to aid in transitioning between versions, watchman will use\nthe value of the now deprecated ",(0,r.mdx)("a",{parentName:"p",href:"#root_restrict_files"},"root_restrict_files"),"\nconfiguration setting."),(0,r.mdx)("p",null,"If neither ",(0,r.mdx)("inlineCode",{parentName:"p"},"root_files")," nor ",(0,r.mdx)("inlineCode",{parentName:"p"},"root_restrict_files")," is specified in the\nconfiguration, watchman will use a default value consisting of:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},".git")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},".hg")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},".svn")),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},".watchmanconfig"))),(0,r.mdx)("p",null,"Watchman will add ",(0,r.mdx)("inlineCode",{parentName:"p"},".watchmanconfig")," to whatever value is specified for this\nconfiguration value if it is not present."),(0,r.mdx)("p",null,"This example causes only ",(0,r.mdx)("inlineCode",{parentName:"p"},".watchmanconfig")," to be considered as a project root\nfile:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "root_files": [".watchmanconfig"]\n}\n')),(0,r.mdx)("p",null,"See the ",(0,r.mdx)("a",{parentName:"p",href:"/watchman/docs/cmd/watch-project"},"watch-project")," command for more information."),(0,r.mdx)("h3",{id:"enforce_root_files"},"enforce_root_files"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 3.1.")),(0,r.mdx)("p",null,"This is a boolean option that defaults to ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),". If it is set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true")," then\nthe ",(0,r.mdx)("a",{parentName:"p",href:"/watchman/docs/cmd/watch"},"watch")," command will only succeed if the requested directory\ncontains one of the files listed by the ",(0,r.mdx)("a",{parentName:"p",href:"#root_files"},"root_files")," configuration\noption, and the ",(0,r.mdx)("a",{parentName:"p",href:"/watchman/docs/cmd/watch-project"},"watch-project")," command will only succeed\nif a valid project root is found."),(0,r.mdx)("p",null,"If left unspecified, to aid in transitioning between versions, watchman will\ncheck to see if the now deprecated ",(0,r.mdx)("a",{parentName:"p",href:"#root_restrict_files"},"root_restrict_files"),"\nconfiguration setting is present. If it is found then the effective value of\n",(0,r.mdx)("inlineCode",{parentName:"p"},"enforce_root_files")," is set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),"."),(0,r.mdx)("h3",{id:"root_restrict_files"},"root_restrict_files"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Deprecated starting in version 3.1; use ",(0,r.mdx)("a",{parentName:"em",href:"#root_files"},"root_files")," and\n",(0,r.mdx)("a",{parentName:"em",href:"#enforce_root_files"},"enforce_root_files")," to effect the same behavior.")),(0,r.mdx)("p",null,"Specifies a list of files, at least one of which should be present in a\ndirectory for watchman to add it as a root. By default there are no\nrestrictions."),(0,r.mdx)("p",null,"For example,"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "root_restrict_files": [".git", ".hg"]\n}\n')),(0,r.mdx)("p",null,"will allow watches only in the top level of Git or Mercurial repositories."),(0,r.mdx)("h3",{id:"illegal_fstypes"},"illegal_fstypes"),(0,r.mdx)("p",null,"Specifies a list of filesystem types that watchman is prohibited to attempt to\nwatch. Watchman will determine the filesystem type of the root of a watch; if\nthe typename is present in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"illegal_fstypes")," list, the watch will be\nprohibited. You may also specify ",(0,r.mdx)("inlineCode",{parentName:"p"},"illegal_fstypes_advice")," as a string with\nadditional advice to your user. The purpose of this configuration option is\nlargely to prevent the use of Watchman on network mounted filesystems. On Linux\nsystems, Watchman may not be able to determine the precise type name of a\nmounted filesystem. If the filesystem type is not known to watchman, it will be\nreported as ",(0,r.mdx)("inlineCode",{parentName:"p"},"unknown"),"."),(0,r.mdx)("p",null,"For example,"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "illegal_fstypes": ["nfs", "cifs", "smb"],\n  "illegal_fstypes_advice": "use a local directory"\n}\n')),(0,r.mdx)("p",null,"will prevent watching dirs mounted on network filesystems and provide the advice\nto use a local directory. You may omit the ",(0,r.mdx)("inlineCode",{parentName:"p"},"illegal_fstypes_advice")," setting to\nuse a default suggestion to relocate the directory to local disk."),(0,r.mdx)("h3",{id:"ignore_vcs"},"ignore_vcs"),(0,r.mdx)("p",null,"Apply special VCS ignore logic to the set of named dirs. This option has a\ndefault value of ",(0,r.mdx)("inlineCode",{parentName:"p"},'[".git", ".hg", ".svn"]'),". Dirs that match this option are\nobserved and watched using special shallow logic. The shallow watch allows\nwatchman to mildly abuse the version control directories to store its query\ncookie files and to observe VCS locking activity without having to watch the\nentire set of VCS data for large trees."),(0,r.mdx)("h3",{id:"ignore_dirs"},"ignore_dirs"),(0,r.mdx)("p",null,"Dirs that match are completely ignored by watchman. This is useful to ignore a\ndirectory that contains only build products and where file change notifications\nare unwanted because of the sheer volume of files."),(0,r.mdx)("p",null,"For example,"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "ignore_dirs": ["build"]\n}\n')),(0,r.mdx)("p",null,"would ignore the ",(0,r.mdx)("inlineCode",{parentName:"p"},"build")," directory at the top level of the watched tree, and\neverything below it. It will never appear in the watchman query results for the\ntree."),(0,r.mdx)("p",null,"On Linux systems, ",(0,r.mdx)("inlineCode",{parentName:"p"},"ignore_dirs")," is respected at the OS level; the kernel simply\nwill not tell watchman about changes to ignored dirs. macOS and Windows have\nlimited or no support for this, so watchman needs to process and ignore this\nclass of change."),(0,r.mdx)("p",null,"For large trees or especially busy build dirs, it is recommended that you move\nthe busy build dirs out of the tree for more optimal performance."),(0,r.mdx)("p",null,"Since version 2.9.9, if you list a dir in ",(0,r.mdx)("inlineCode",{parentName:"p"},"ignore_dirs")," that is also listed in\n",(0,r.mdx)("inlineCode",{parentName:"p"},"ignore_vcs"),", the ",(0,r.mdx)("inlineCode",{parentName:"p"},"ignore_dirs")," placement will take precedence. This may not\nsound like a big deal, but since ",(0,r.mdx)("inlineCode",{parentName:"p"},"ignore_vcs")," is used as a hint to for the\nplacement of ",(0,r.mdx)("a",{parentName:"p",href:"/watchman/docs/cookies"},"cookie files"),", having these two options overlap in\nearlier versions would break watchman queries."),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.6.")),(0,r.mdx)("p",null,"On macOS the first 8 items listed in ",(0,r.mdx)("inlineCode",{parentName:"p"},"ignore_dirs")," can be accelerated at the OS\nlevel. This means that changes to those paths are not even communicated to the\nwatchman service. Entries beyond the first 8 are processed and ignored by\nwatchman. If your workload is prone to recrawl events you will want to\nprioritize your ",(0,r.mdx)("inlineCode",{parentName:"p"},"ignore_dirs")," list so that the most busy ignored locations\noccupy the first 8 positions in this list."),(0,r.mdx)("h3",{id:"gc_age_seconds"},"gc_age_seconds"),(0,r.mdx)("p",null,"Deleted files (and dirs) older than this are periodically pruned from the\ninternal view of the filesystem. Until they are pruned, they will be visible to\nqueries but will have their ",(0,r.mdx)("inlineCode",{parentName:"p"},"exists")," field set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),". Once they are pruned,\nwatchman will remember the most recent clock value of the pruned nodes. Any\nsince queries based on a clock prior to the last prune clock will be treated as\na fresh instance query. This allows a client to detect and choose how to handle\nthe case where they have missed changes. See ",(0,r.mdx)("inlineCode",{parentName:"p"},"is_fresh_instance")," elsewhere in\nthis document for more information. The default for this is ",(0,r.mdx)("inlineCode",{parentName:"p"},"43200")," (12 hours)."),(0,r.mdx)("h3",{id:"gc_interval_seconds"},"gc_interval_seconds"),(0,r.mdx)("p",null,"How often to check for, and prune out, deleted nodes per the ",(0,r.mdx)("inlineCode",{parentName:"p"},"gc_age_seconds"),"\noption description above. The default for this is ",(0,r.mdx)("inlineCode",{parentName:"p"},"86400")," (24 hours). Set this\nto ",(0,r.mdx)("inlineCode",{parentName:"p"},"0")," to disable the periodic pruning operation."),(0,r.mdx)("h3",{id:"fsevents_latency"},"fsevents_latency"),(0,r.mdx)("p",null,"Controls the latency parameter that is passed to ",(0,r.mdx)("inlineCode",{parentName:"p"},"FSEventStreamCreate")," on macOS.\nThe value is measured in seconds. The fixed value of this parameter prior to\nversion 3.2 of watchman was ",(0,r.mdx)("inlineCode",{parentName:"p"},"0.0001")," seconds. Starting in version 3.2 of\nwatchman, the default is now ",(0,r.mdx)("inlineCode",{parentName:"p"},"0.01")," seconds and can be controlled on a per-root\nbasis."),(0,r.mdx)("p",null,"If you observe problems with ",(0,r.mdx)("inlineCode",{parentName:"p"},"kFSEventStreamEventFlagUserDropped")," increasing the\nlatency parameter will allow the system to batch more change notifications\ntogether and operate more efficiently."),(0,r.mdx)("h3",{id:"fsevents_try_resync"},"fsevents_try_resync"),(0,r.mdx)("p",null,"This is macOS specific."),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.6.")),(0,r.mdx)("p",null,"Defaults to ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),". If set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),", if a watch receives a\n",(0,r.mdx)("inlineCode",{parentName:"p"},"kFSEventStreamEventFlagUserDropped")," event, attempt to resync from the\n",(0,r.mdx)("inlineCode",{parentName:"p"},"fsevents")," journal if it is available. The journal may not be available if one\nor more volumes are mounted read-only, if the administrator has purged the\njournal, or if the ",(0,r.mdx)("inlineCode",{parentName:"p"},"fsevents")," id numbers have rolled over."),(0,r.mdx)("p",null,"This resync operation is advantageous because it effectively allows rewinding\nand replaying the event stream from a known point in time and avoids the need to\nrecrawl the entire watch."),(0,r.mdx)("p",null,"If this option is set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),", or if the journal is not available, the\noriginal strategy of recrawling the watched directory tree is used instead."),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.7.")),(0,r.mdx)("p",null,"The default changed to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),". In addition, this resync strategy is now also\napplied to ",(0,r.mdx)("inlineCode",{parentName:"p"},"kFSEventStreamEventFlagKernelDropped")," events."),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since December 2021.")),(0,r.mdx)("p",null,"The default changed to ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),". There are possible undiagnosed correctness\nissues with this setting."),(0,r.mdx)("h3",{id:"prefer_split_fsevents_watcher"},"prefer_split_fsevents_watcher"),(0,r.mdx)("p",null,"This is macOS specific."),(0,r.mdx)("p",null,"Defaults to ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),". If set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),", Watchman will use several FSEvents\nstreams to watch a directory hierarchy instead of a single stream. This has been\nshown to significantly reduce the number of ",(0,r.mdx)("inlineCode",{parentName:"p"},"kFSEventStreamEventFlagUserDropped"),"\nevents for workflows issuing heavy writes to a top-level directory that is\nlisted in ",(0,r.mdx)("a",{parentName:"p",href:"#ignore_dirs"},"ignore_dirs"),"."),(0,r.mdx)("h3",{id:"idle_reap_age_seconds"},"idle_reap_age_seconds"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 3.7.")),(0,r.mdx)("p",null,"How many seconds a watch can remain idle before becoming a candidate for\nreaping, measured in seconds. The default for this is ",(0,r.mdx)("inlineCode",{parentName:"p"},"432000")," (5 days). Set\nthis to ",(0,r.mdx)("inlineCode",{parentName:"p"},"0")," to prevent reaping."),(0,r.mdx)("p",null,"A watch is considered to be idle when it has had no commands that operate on it\nfor ",(0,r.mdx)("inlineCode",{parentName:"p"},"idle_reap_age_seconds"),". If an idle watch has no triggers and no\nsubscriptions then it will be cancelled, releasing the associated operating\nsystem resources, and removed from the state file."),(0,r.mdx)("h3",{id:"hint_num_files_per_dir"},"hint_num_files_per_dir"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 3.9.")),(0,r.mdx)("p",null,"Used to pre-size hash tables used to track files per directory. This is most\nimpactful during the initial crawl of the filesystem. Setting this too small\nwill increase the chance of a hash insert having a collision and drive up the\ncost of the insert and subsequent gets."),(0,r.mdx)("p",null,"Prior to version 3.9 of watchman this value was fixed at ",(0,r.mdx)("inlineCode",{parentName:"p"},"2"),". Starting in\nversion 3.9 the default value is ",(0,r.mdx)("inlineCode",{parentName:"p"},"64")," and can be configured via this setting in\nthe ",(0,r.mdx)("inlineCode",{parentName:"p"},".watchmanconfig")," or the global ",(0,r.mdx)("inlineCode",{parentName:"p"},"/etc/watchman.json")," configuration file."),(0,r.mdx)("p",null,"Setting this value very large increases the memory overhead per directory in the\ntree; the value is rounded up to the next power of two and pre-allocated in an\narray of pointers. On a 64-bit system multiply that number by 8 to arrive at the\nnumber of bytes of overhead (halve this on a 32-bit system). The overhead is\ndoubled when using a case insensitive filesystem."),(0,r.mdx)("p",null,"The ideal size from a time complexity perspective is the number of files in your\nlargest directory. From a space complexity perspective, the ideal size is 1; you\nwould pay the cost of the collisions during the initial crawl and have a more\noptimal memory usage. Since watchman is primarily employed as an accelerator,\nwe'd recommend biasing towards using more memory and taking less time to run."),(0,r.mdx)("h3",{id:"hint_num_dirs"},"hint_num_dirs"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.6")),(0,r.mdx)("p",null,"Used to pre-size hash tables that are used to track the total set of files in\nthe entire watched tree. The default value for this is 131072."),(0,r.mdx)("p",null,"The optimal size is a power-of-two larger than the number of directories in your\ntree; running ",(0,r.mdx)("inlineCode",{parentName:"p"},"find . -type d | wc -l")," will tell you the number that you have."),(0,r.mdx)("p",null,"Making this number too large is potentially wasteful of memory. Making this\nnumber too small results in increased latency during crawling while the hash\ntables are rebuilt."),(0,r.mdx)("h3",{id:"suppress_recrawl_warnings"},"suppress_recrawl_warnings"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.7")),(0,r.mdx)("p",null,"When set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),", watchman will not produce recrawl related warning fields in\nthe response PDUs of various requests. The default is ",(0,r.mdx)("inlineCode",{parentName:"p"},"false"),"; the intent is\nthat someone in your organization should be aware of recrawls and be able to\nmanage the configuration and workload. Some sites employ an alternative\nmechanism for sampling and reporting this to the right set of people and wish to\ndisable the warning so that it doesn't appear in front of users that are unable\nto make the appropriate configuration changes for themselves."),(0,r.mdx)("h3",{id:"eden_file_count_threshold_for_fresh_instance"},"eden_file_count_threshold_for_fresh_instance"),(0,r.mdx)("p",null,"This is specific to the EdenFS watcher"),(0,r.mdx)("p",null,"When set to a non-zero value, Watchman will return a ",(0,r.mdx)("em",{parentName:"p"},"fresh instance")," to since\nqueries/subscriptions if the number of changed files exceeds the configured\nvalue. In particular, during large updates of the working copies, a lot of files\nmay have changed forcing both Watchman and EdenFS to fetch a significant amount\nof metadata to answer these queries."),(0,r.mdx)("p",null,"This behavior is only enabled if the query specifies the\n",(0,r.mdx)("inlineCode",{parentName:"p"},"empty_on_fresh_instance")," option or when this config is set to ",(0,r.mdx)("inlineCode",{parentName:"p"},"0"),". Default to\n",(0,r.mdx)("inlineCode",{parentName:"p"},"10000"),"."))}u.isMDXComponent=!0}}]);