"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[9467],{3905:function(e,t,n){n.r(t),n.d(t,{MDXContext:function(){return s},MDXProvider:function(){return d},mdx:function(){return f},useMDXComponents:function(){return p},withMDXComponents:function(){return l}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function m(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){return function(t){var n=p(t.components);return a.createElement(e,i({},t,{components:n}))}},p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,s=m(e,["components","mdxType","originalType","parentName"]),l=p(n),d=r,h=l["".concat(o,".").concat(d)]||l[d]||u[d]||i;return n?a.createElement(h,c(c({ref:t},s),{},{components:n})):a.createElement(h,c({ref:t},s))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var c={};for(var m in t)hasOwnProperty.call(t,m)&&(c[m]=t[m]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},15529:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return m},default:function(){return u},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return p}});var a=n(83117),r=n(80102),i=(n(67294),n(3905)),o=["components"],c={title:"match & imatch",category:"Expression Terms"},m=void 0,s={unversionedId:"expr/match",id:"expr/match",title:"match & imatch",description:"The match expression performs a glob-style match against the basename of the",source:"@site/docs/expr/match.md",sourceDirName:"expr",slug:"/expr/match",permalink:"/watchman/docs/expr/match",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/expr/match.md",tags:[],version:"current",frontMatter:{title:"match & imatch",category:"Expression Terms"},sidebar:"tutorialSidebar",previous:{title:"false",permalink:"/watchman/docs/expr/false"},next:{title:"name & iname",permalink:"/watchman/docs/expr/name"}},l={},p=[{value:"Case sensitivity",id:"case-sensitivity",level:3},{value:"wildmatch",id:"wildmatch",level:2}],d={toc:p};function u(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.mdx)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"match")," expression performs a glob-style match against the basename of the\nfile, evaluating true if the match is successful."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'["match", "*.txt"]\n')),(0,i.mdx)("p",null,"You may optionally provide a third argument to change the scope of the match\nfrom the basename to the wholename of the file."),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'["match", "*.txt", "basename"]\n["match", "dir/*.txt", "wholename"]\n')),(0,i.mdx)("h3",{id:"case-sensitivity"},"Case sensitivity"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"match")," is case sensitive; for case insensitive matching use ",(0,i.mdx)("inlineCode",{parentName:"p"},"imatch")," instead;\nit behaves identically to ",(0,i.mdx)("inlineCode",{parentName:"p"},"match")," except that the match is performed ignoring\ncase."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Since 2.9.9.")),(0,i.mdx)("p",null,"On systems where the watched root is a case insensitive filesystem (this is the\ncommon case for macOS and Windows), ",(0,i.mdx)("inlineCode",{parentName:"p"},"match")," is equivalent to ",(0,i.mdx)("inlineCode",{parentName:"p"},"imatch"),"."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Since 4.7.")),(0,i.mdx)("p",null,"You can override the case sensitivity of all name matching operations used in\nthe query by setting the ",(0,i.mdx)("inlineCode",{parentName:"p"},"case_sensitive")," field in your query."),(0,i.mdx)("h2",{id:"wildmatch"},"wildmatch"),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Since 3.7.")),(0,i.mdx)("p",null,"The ",(0,i.mdx)("inlineCode",{parentName:"p"},"match")," expression has been enhanced as described below. The\n",(0,i.mdx)("a",{parentName:"p",href:"/watchman/docs/capabilities"},"capability")," name associated with this enhanced functionality\nis ",(0,i.mdx)("inlineCode",{parentName:"p"},"wildmatch"),"."),(0,i.mdx)("p",null,"If you want to recursively match all files under a directory, use the ",(0,i.mdx)("inlineCode",{parentName:"p"},"**")," glob\noperator along with the ",(0,i.mdx)("inlineCode",{parentName:"p"},"wholename")," scope:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'["match", "src/**/*.java", "wholename"]\n')),(0,i.mdx)("p",null,"By default, paths whose names start with ",(0,i.mdx)("inlineCode",{parentName:"p"},".")," are not included. To change this\nbehavior, you may optionally provide a fourth argument containing a dictionary\nof flags:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'["match", "*.txt", "basename", {"includedotfiles": true}]\n')),(0,i.mdx)("p",null,"By default, backslashes in the pattern escape the next character, so ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\*"),"\nmatches a literal ",(0,i.mdx)("inlineCode",{parentName:"p"},"*")," character. To change this behavior so backslashes are\ntreated literally, set the ",(0,i.mdx)("inlineCode",{parentName:"p"},"noescape")," flag to ",(0,i.mdx)("inlineCode",{parentName:"p"},"true")," in the flags dictionary.\n(Note that ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\\\")," is a literal ",(0,i.mdx)("inlineCode",{parentName:"p"},"\\")," in JSON notation):"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'["match", "*\\\\*.txt", "filename", {"noescape": true}]\n')),(0,i.mdx)("p",null,"matches ",(0,i.mdx)("inlineCode",{parentName:"p"},"a\\b.txt"),"."))}u.isMDXComponent=!0}}]);