"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[1176],{3905:function(e,t,n){n.r(t),n.d(t,{MDXContext:function(){return l},MDXProvider:function(){return u},mdx:function(){return h},useMDXComponents:function(){return d},withMDXComponents:function(){return m}});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),m=function(e){return function(t){var n=d(t.components);return r.createElement(e,o({},t,{components:n}))}},d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=d(n),u=i,f=m["".concat(a,".").concat(u)]||m[u]||p[u]||o;return n?r.createElement(f,c(c({ref:t},l),{},{components:n})):r.createElement(f,c({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=f;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},15226:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return s},default:function(){return p},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var r=n(83117),i=n(80102),o=(n(67294),n(3905)),a=["components"],c={title:"since",category:"Commands"},s=void 0,l={unversionedId:"cmd/since",id:"cmd/since",title:"since",description:"Finds all files that were modified since the specified clockspec that match the",source:"@site/docs/cmd/since.md",sourceDirName:"cmd",slug:"/cmd/since",permalink:"/watchman/docs/cmd/since",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/cmd/since.md",tags:[],version:"current",frontMatter:{title:"since",category:"Commands"},sidebar:"tutorialSidebar",previous:{title:"shutdown-server",permalink:"/watchman/docs/cmd/shutdown-server"},next:{title:"state-enter",permalink:"/watchman/docs/cmd/state-enter"}},m={},d=[],u={toc:d};function p(e){var t=e.components,n=(0,i.Z)(e,a);return(0,o.mdx)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-bash"},"$ watchman since /path/to/dir <clockspec> [patterns]\n")),(0,o.mdx)("p",null,"Finds all files that were modified since the specified clockspec that match the\noptional list of patterns. If no patterns are specified, all modified files are\nreturned."),(0,o.mdx)("p",null,"The response includes a ",(0,o.mdx)("inlineCode",{parentName:"p"},"files")," array, each element of which is an object with\nfields containing information about the file:"),(0,o.mdx)("pre",null,(0,o.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "2.7",\n    "is_fresh_instance": true,\n    "clock": "c:80616:59",\n    "files": [\n        {\n            "cclock": "c:80616:1",\n            "ctime": 1357617635,\n            "dev": 16777220,\n            "exists": true,\n            "gid": 100,\n            "ino": 20161390,\n            "mode": 33188,\n            "mtime": 1357617635,\n            "name": "argv.c",\n            "nlink": 1,\n            "oclock": "c:80616:39",\n            "size": 1340,\n            "uid": 100\n        }\n    ]\n}\n')),(0,o.mdx)("p",null,"The fields should be largely self-explanatory; they correspond to fields from\nthe underlying ",(0,o.mdx)("inlineCode",{parentName:"p"},"struct stat"),", but a couple need special mention:"),(0,o.mdx)("ul",null,(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"cclock"),' - The "created" clock; the clock value representing the time that\nthis file was first observed, or the clock value where this file changed from\ndeleted to non-deleted state.'),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"oclock"),' - The "observed" clock; the clock value representing the time that\nthis file was last observed to have changed.'),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"exists")," - whether we believe that the file exists on disk or not. If this\nis false, most of the other fields will be omitted."),(0,o.mdx)("li",{parentName:"ul"},(0,o.mdx)("strong",{parentName:"li"},"new")," - this is only set in cases where the file results were generated as\npart of a time or clock based query, such as the ",(0,o.mdx)("inlineCode",{parentName:"li"},"since")," command. If the\n",(0,o.mdx)("inlineCode",{parentName:"li"},"cclock")," value for the file is newer than the time you specified then the file\nentry is marked as ",(0,o.mdx)("inlineCode",{parentName:"li"},"new"),". This allows you to more easily determine if the file\nwas newly created without having to maintain a lot of state.")))}p.isMDXComponent=!0}}]);