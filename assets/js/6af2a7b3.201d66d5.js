"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[2415],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return m},MDXProvider:function(){return u},mdx:function(){return f},useMDXComponents:function(){return c},withMDXComponents:function(){return d}});var i=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i])}return e},r.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var m=i.createContext({}),d=function(e){return function(n){var t=c(n.components);return i.createElement(e,r({},n,{components:t}))}},c=function(e){var n=i.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=c(e.components);return i.createElement(m.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},h=i.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=c(t),u=a,h=d["".concat(o,".").concat(u)]||d[u]||p[u]||r;return t?i.createElement(h,s(s({ref:n},m),{},{components:t})):i.createElement(h,s({ref:n},m))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,o=new Array(r);o[0]=h;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var m=2;m<r;m++)o[m]=t[m];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}h.displayName="MDXCreateElement"},89809:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return c}});var i=t(83117),a=t(80102),r=(t(67294),t(3905)),o=["components"],s={title:"query",category:"Commands"},l=void 0,m={unversionedId:"cmd/query",id:"cmd/query",title:"query",description:"Since 1.6.",source:"@site/docs/cmd/query.md",sourceDirName:"cmd",slug:"/cmd/query",permalink:"/watchman/docs/cmd/query",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/cmd/query.md",tags:[],version:"current",frontMatter:{title:"query",category:"Commands"},sidebar:"tutorialSidebar",previous:{title:"log",permalink:"/watchman/docs/cmd/log"},next:{title:"shutdown-server",permalink:"/watchman/docs/cmd/shutdown-server"}},d={},c=[{value:"Available fields",id:"available-fields",level:3},{value:"Synchronization timeout (since 2.1)",id:"synchronization-timeout-since-21",level:3},{value:"Lock timeout",id:"lock-timeout",level:3},{value:"Case sensitivity",id:"case-sensitivity",level:3},{value:"Directory Events",id:"directory-events",level:3}],u={toc:c};function p(e){var n=e.components,t=(0,a.Z)(e,o);return(0,r.mdx)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 1.6.")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "suffix": "php",\n  "expression": ["allof",\n    ["type", "f"],\n    ["not", "empty"],\n    ["ipcre", "test", "basename"]\n  ],\n  "fields": ["name"]\n}]\nEOT\n')),(0,r.mdx)("p",null,"Executes a query against the specified root. This example uses the ",(0,r.mdx)("inlineCode",{parentName:"p"},"-j")," flag to\nthe watchman binary that tells it to read stdin and interpret it as the JSON\nrequest object to send to the watchman service. This flag allows you to send in\na pretty JSON object (as shown above), but if you're using the socket interface\nyou must still format the object as a single line JSON request as documented in\nthe protocol spec."),(0,r.mdx)("p",null,"The first argument to query is the path to the watched root. The second argument\nholds a JSON object describing the query to be run. The query object is\nprocessed by passing it to the query engine (see ",(0,r.mdx)("a",{parentName:"p",href:"/watchman/docs/file-query"},"File Queries"),")\nwhich will generate a set of matching files."),(0,r.mdx)("p",null,"The query command will then consult the ",(0,r.mdx)("inlineCode",{parentName:"p"},"fields")," member of the query object; if\nit is not present it will default to:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'"fields": ["name", "exists", "new", "size", "mode"]\n')),(0,r.mdx)("p",null,"For each file in the result set, the query command will generate a JSON object\nvalue populated with the requested fields. For example, the default set of\nfields will return a response something like this:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "2.9",\n    "clock": "c:80616:59",\n    "is_fresh_instance": false,\n    "files": [\n        {\n            "exists": true,\n            "mode": 33188,\n            "new": false,\n            "name": "argv.c",\n            "size": 1340,\n        }\n    ]\n}\n')),(0,r.mdx)("p",null,"If a field's value cannot be computed, a field's value may be ",(0,r.mdx)("inlineCode",{parentName:"p"},"null"),", or may be\nan object with an ",(0,r.mdx)("inlineCode",{parentName:"p"},"error")," key containing a descriptive message string:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "2019-07-22T13:50:36Z",\n    "is_fresh_instance": false,\n    "clock": "c:1563834049:1830370:791543813:2257494",\n    "files": [\n        {\n            "content.sha1hex": null,\n            "name": "docs"\n            "symlink_target": null,\n            "type": "d",\n        },\n        {\n            "content.sha1hex": {\n                "error": "eloop: file is a symlink: Invalid argument: Invalid argument"\n            },\n            "type": "l",\n            "symlink_target": "eloop",\n            "name": "eloop"\n        }\n    ]\n}\n')),(0,r.mdx)("p",null,"For queries using the ",(0,r.mdx)("inlineCode",{parentName:"p"},"since")," generator, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"is_fresh_instance")," member is true\nif the particular clock value indicates that it was returned by a different\ninstance of watchman, or a named cursor hasn't been seen before. In that case,\nonly files that currently exist will be returned, and all files will have ",(0,r.mdx)("inlineCode",{parentName:"p"},"new"),"\nset to ",(0,r.mdx)("inlineCode",{parentName:"p"},"true"),". For all other queries, is_fresh_instance will always be true.\nAdvanced users may set the input parameter ",(0,r.mdx)("inlineCode",{parentName:"p"},"empty_on_fresh_instance")," to true, in\nwhich case no files will be returned for fresh instances."),(0,r.mdx)("p",null,"If the ",(0,r.mdx)("inlineCode",{parentName:"p"},"fields")," member consists of a single entry, the files result will be a\nsimple array of values; ",(0,r.mdx)("del",{parentName:"p"},'~"fields": ','["name"]'),"~ produces:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n    "version": "1.5",\n    "clock": "c:80616:59",\n    "files": ["argv.c", "foo.c"]\n}\n')),(0,r.mdx)("h3",{id:"available-fields"},"Available fields"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"name")," - string: the filename, relative to the watched root"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"exists")," - bool: true if the file exists, false if it has been deleted"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"cclock"),' - string: the "created clock"; the clock value when we first observed\nthe file, or the clock value when it last switched from !exists to exists.'),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"oclock"),' - string: the "observed clock"; the clock value where we last\nobserved some change in this file or its metadata.'),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"ctime"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"ctime_ms"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"ctime_us"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"ctime_ns"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"ctime_f")," - last inode change\ntime measured in integer seconds, milliseconds, microseconds, nanoseconds or\nfloating point seconds respectively."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"mtime"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"mtime_ms"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"mtime_us"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"mtime_ns"),", ",(0,r.mdx)("inlineCode",{parentName:"li"},"mtime_f")," - modified time\nmeasured in integer seconds, milliseconds, microseconds, nanoseconds or\nfloating point seconds respectively."),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"size")," - integer: file size in bytes"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"mode")," - integer: file (or directory) mode expressed as a decimal integer"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"uid")," - integer: the owning uid"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"gid")," - integer: the owning gid"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"ino")," - integer: the inode number"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"dev")," - integer: the device number"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"nlink")," - integer: number of hard links"),(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"new")," - bool: whether this entry is newer than the ",(0,r.mdx)("inlineCode",{parentName:"li"},"since")," generator criteria")),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 3.1.")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"type")," - string: the file type. Has the the values listed in\n",(0,r.mdx)("a",{parentName:"li",href:"/watchman/docs/expr/type"},"the type query expression"))),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.6.")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"symlink_target")," - string: the target of a symbolic link if the file is a\nsymbolic link")),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.9.")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},(0,r.mdx)("inlineCode",{parentName:"li"},"content.sha1hex")," - string: the SHA-1 digest of the file's byte content,\nencoded as 40 hexidecimal digits (e.g.\n",(0,r.mdx)("inlineCode",{parentName:"li"},'"da39a3ee5e6b4b0d3255bfef95601890afd80709"')," for an empty file)")),(0,r.mdx)("h3",{id:"synchronization-timeout-since-21"},"Synchronization timeout (since 2.1)"),(0,r.mdx)("p",null,"By default a ",(0,r.mdx)("inlineCode",{parentName:"p"},"query")," will wait for up to 60 seconds for the view of the\nfilesystem to become current. Watchman decides that the view is current by\ncreating a cookie file and waiting to observe the notification that it is\npresent. If the cookie is not observed within the sync_timeout period then the\nquery invocation will error out with a synchronization error message."),(0,r.mdx)("p",null,"If your synchronization requirements differ from the default, you may pass in\nyour desired timeout when you construct your query; it must be an integer value\nexpressed in milliseconds:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'["query", "/path/to/root", {\n  "expression": ["exists"],\n  "fields": ["name"],\n  "sync_timeout": 60000\n}]\n')),(0,r.mdx)("p",null,"You may specify ",(0,r.mdx)("inlineCode",{parentName:"p"},"0")," as the value if you do not wish for the query to create a\ncookie and synchronize; the query will be evaluated over the present view of the\ntree, which may lag behind the present state of the filesystem."),(0,r.mdx)("h3",{id:"lock-timeout"},"Lock timeout"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.6.")),(0,r.mdx)("p",null,"By default queries will wait for up to 60 seconds to acquire a lock to inspect\nthe view of the filesystem tree. In practice, this timeout should never be hit\n(it is indicative of an environmental or load related issue). However, in some\nsituations it is important to ensure that the query attempt times out sooner\nthan this. You may use the ",(0,r.mdx)("inlineCode",{parentName:"p"},"lock_timeout")," field to control this behavior.\n",(0,r.mdx)("inlineCode",{parentName:"p"},"lock_timeout")," must be an integer value expressed in milliseconds:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'["query", "/path/to/root", {\n  "expression": ["exists"],\n  "fields": ["name"],\n  "lock_timeout": 60000,\n  "sync_timeout": 60000\n}]\n')),(0,r.mdx)("p",null,"Prior to version 4.6, the ",(0,r.mdx)("inlineCode",{parentName:"p"},"lock_timeout")," could not be configured and had an\neffective value of infinity."),(0,r.mdx)("h3",{id:"case-sensitivity"},"Case sensitivity"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 2.9.9.")),(0,r.mdx)("p",null,"On systems where the watched root is a case insensitive filesystem (this is the\ncommon case for macOS and Windows), various name matching operations default to\ncase insensitive."),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.7.")),(0,r.mdx)("p",null,"You may override the case sensitivity of the various name matching operations by\nsetting the ",(0,r.mdx)("inlineCode",{parentName:"p"},"case_sensitive")," field in your query spec. It default to the case\nsensitivity of the watched root. This is useful in cases where you know that the\ncontents of the tree are treated case sensitively by your various tools but are\nrunning on a case insensitive filesystem. By forcing the name matches to case\nsensitive mode the matches are faster and in some cases can be accelerated by\nusing alternative algorithms."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},'$ watchman -j <<-EOT\n["query", "/path/to/root", {\n  "suffix": "php",\n  "expression": ["match", "foo*.c", "basename"],\n  "case_sensitive": true,\n  "fields": ["name"]\n}]\nEOT\n')),(0,r.mdx)("h3",{id:"directory-events"},"Directory Events"),(0,r.mdx)("p",null,"Generally, Watchman should report changes to directories for all queries."),(0,r.mdx)("p",null,"On EdenFS repositories there is an exception. When the user has changed commits\nin the duration of a time query, directory changes may not be reported across\nthose commit changes."),(0,r.mdx)("p",null,"the option ",(0,r.mdx)("inlineCode",{parentName:"p"},"always_include_directories")," exists to include events for directories\nacross commit transitions. This is only supported for mercurial. This can be\nexpensive, so clients who do not need this are recommended not to use this. This\nvalue defaults to false."))}p.isMDXComponent=!0}}]);