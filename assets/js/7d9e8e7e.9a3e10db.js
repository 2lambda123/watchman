"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[6277],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return d},MDXProvider:function(){return m},mdx:function(){return f},useMDXComponents:function(){return p},withMDXComponents:function(){return c}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(){return i=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},i.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=a.createContext({}),c=function(e){return function(n){var t=p(n.components);return a.createElement(e,i({},n,{components:t}))}},p=function(e){var n=a.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(d.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},y=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(t),m=r,y=c["".concat(o,".").concat(m)]||c[m]||u[m]||i;return t?a.createElement(y,l(l({ref:n},d),{},{components:t})):a.createElement(y,l({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=y;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=t[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}y.displayName="MDXCreateElement"},40094:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return u},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var a=t(83117),r=t(80102),i=(t(67294),t(3905)),o=["components"],l={title:"BSER Binary Protocol",category:"Internals"},s=void 0,d={unversionedId:"bser",id:"bser",title:"BSER Binary Protocol",description:"The basic JSON protocol in watchman allows quick and easy integration.",source:"@site/docs/bser.md",sourceDirName:".",slug:"/bser",permalink:"/watchman/docs/bser",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/bser.md",tags:[],version:"current",frontMatter:{title:"BSER Binary Protocol",category:"Internals"},sidebar:"tutorialSidebar",previous:{title:"type",permalink:"/watchman/docs/expr/type"},next:{title:"Case-Insensitivity",permalink:"/watchman/docs/casefolding"}},c={},p=[{value:"PDU",id:"pdu",level:2},{value:"Arrays",id:"arrays",level:2},{value:"Objects",id:"objects",level:2},{value:"Strings",id:"strings",level:2},{value:"Encoding",id:"encoding",level:3},{value:"Integers",id:"integers",level:2},{value:"Real",id:"real",level:2},{value:"Boolean",id:"boolean",level:2},{value:"Null",id:"null",level:2},{value:"Array of Templated Objects",id:"array-of-templated-objects",level:2}],m={toc:p};function u(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.mdx)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"The basic JSON protocol in watchman allows quick and easy integration.\nApplications with higher performance requirements may want to consider the\nbinary protocol instead."),(0,i.mdx)("p",null,'The binary protocol is enabled by the client sending the byte sequence\n"\\x00x\\x01".'),(0,i.mdx)("h2",{id:"pdu"},"PDU"),(0,i.mdx)("p",null,"A PDU is prefixed by its length expressed as an encoded integer. This allows the\npeer to determine how much storage is required to read and decode it."),(0,i.mdx)("h2",{id:"arrays"},"Arrays"),(0,i.mdx)("p",null,"Arrays are indicated by a ",(0,i.mdx)("inlineCode",{parentName:"p"},"0x00")," byte value followed by an integer value to\nindicate how many items follow. Then each item is encoded one after the other."),(0,i.mdx)("h2",{id:"objects"},"Objects"),(0,i.mdx)("p",null,"Objects are indicated by a ",(0,i.mdx)("inlineCode",{parentName:"p"},"0x01")," byte value followed by an integer value to\nindicate the number of properties in the object. Then each key/value pair is\nencoded one after the other."),(0,i.mdx)("h2",{id:"strings"},"Strings"),(0,i.mdx)("p",null,"Strings are indicated by a ",(0,i.mdx)("inlineCode",{parentName:"p"},"0x02")," byte value followed by an integer value to\nindicate the number of bytes in the string, followed by the bytes of the string."),(0,i.mdx)("h3",{id:"encoding"},"Encoding"),(0,i.mdx)("p",null,"Unlike JSON, strings are not defined as having any particular encoding; they are\ntransmitted as binary strings. This is because the underlying filesystem APIs\ndon't define any particular encoding for names."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Exception:")," Keys in objects that are defined by watchman commands are always\nASCII. In general, keys in objects are always UTF-8."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Rationale:")," Several programming languages like Python 3 expect all text to be\nin a particular encoding and make it inconvenient to pass in bytestrings or\nother encodings. Also, the primary purpose of not defining an encoding is that\nfilenames don't always have one, and filenames are unlikely to show up as keys."),(0,i.mdx)("h2",{id:"integers"},"Integers"),(0,i.mdx)("p",null,"All integers are signed and transmitted in the host byte order of the system\nrunning the watchman daemon."),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"0x03")," indicates an int8_t. It is followed by the int8_t value."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"0x04")," indicates an int16_t. It is followed by the int16_t value."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"0x05")," indicates an int32_t. It is followed by the int32_t value."),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"0x06")," indicates an int64_t. It is followed by the int64_t value.")),(0,i.mdx)("h2",{id:"real"},"Real"),(0,i.mdx)("p",null,"A real number is indicated by a ",(0,i.mdx)("inlineCode",{parentName:"p"},"0x07")," byte followed by 8 bytes of double value."),(0,i.mdx)("h2",{id:"boolean"},"Boolean"),(0,i.mdx)("ul",null,(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"0x08")," indicates boolean true"),(0,i.mdx)("li",{parentName:"ul"},(0,i.mdx)("inlineCode",{parentName:"li"},"0x09")," indicates boolean false")),(0,i.mdx)("h2",{id:"null"},"Null"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"0x0a")," indicates the null value"),(0,i.mdx)("h2",{id:"array-of-templated-objects"},"Array of Templated Objects"),(0,i.mdx)("p",null,(0,i.mdx)("inlineCode",{parentName:"p"},"0x0b")," indicates a compact array of objects follows. Some of the bigger\ndatastructures returned by watchman are tabular data expressed as an array of\nobjects. This serialization type factors out the repeated object keys into a\nheader array listing the keys, followed by an array containing all the values of\nthe objects."),(0,i.mdx)("p",null,"To represent missing keys in templated arrays, the ",(0,i.mdx)("inlineCode",{parentName:"p"},"0x0c")," encoding value may be\npresent. If encountered it is interpreted as meaning that there is no value for\nthe key that would have been decoded in this position. This is distinct from the\nnull value."),(0,i.mdx)("p",null,"For example:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'[\n   {"name": "fred", "age": 20},\n   {"name": "pete", "age": 30},\n   {"age": 25 },\n]\n')),(0,i.mdx)("p",null,"is represented similar to:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre",className:"language-json"},'["name", "age"],\n[\n  "fred", 20,\n  "pete", 30,\n  0x0c,   25\n]\n')),(0,i.mdx)("p",null,"The precise sequence is:"),(0,i.mdx)("pre",null,(0,i.mdx)("code",{parentName:"pre"},'0b          template\n00          array     -- start prop names\n0302        int, 2    -- two prop names\n02          string    -- first prop "name"\n0304        int, 4\n6e616d65    "name"\n02          string    -- 2nd prop "age"\n0303        int, 3\n616765      "age"\n0303        int, 3    -- there are 3 objects\n02          string    -- object 1, prop 1 name=fred\n0304        int, 4\n66726564    "fred"\n0314        int 0x14  -- object 1, prop 2 age=20\n02          string    -- object 2, prop 1 name=pete\n0304        int 4\n70657465    "pete"\n031e        int, 0x1e -- object 2, prop 2 age=30\n0c          skip      -- object 3, prop 1, not set\n0319        int, 0x19 -- object 3, prop 2 age=25\n')),(0,i.mdx)("p",null,'Note: to avoid hostile "decompression bombs", Watchman will reject parsing\ntemplate objects that have an empty set of keys.'))}u.isMDXComponent=!0}}]);