"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[2716],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return l},MDXProvider:function(){return p},mdx:function(){return f},useMDXComponents:function(){return d},withMDXComponents:function(){return m}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var a in t)Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a])}return e},r.apply(this,arguments)}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),m=function(e){return function(n){var t=d(n.components);return a.createElement(e,r({},n,{components:t}))}},d=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=d(t),p=i,h=m["".concat(o,".").concat(p)]||m[p]||u[p]||r;return t?a.createElement(h,s(s({ref:n},l),{},{components:t})):a.createElement(h,s({ref:n},l))}));function f(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=h;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=t[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},8489:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var a=t(83117),i=t(80102),r=(t(67294),t(3905)),o=["components"],s={title:"subscribe",category:"Commands"},c=void 0,l={unversionedId:"cmd/subscribe",id:"cmd/subscribe",title:"subscribe",description:"Since 1.6",source:"@site/docs/cmd/subscribe.md",sourceDirName:"cmd",slug:"/cmd/subscribe",permalink:"/watchman/docs/cmd/subscribe",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/cmd/subscribe.md",tags:[],version:"current",frontMatter:{title:"subscribe",category:"Commands"},sidebar:"tutorialSidebar",previous:{title:"state-leave",permalink:"/watchman/docs/cmd/state-leave"},next:{title:"trigger-del",permalink:"/watchman/docs/cmd/trigger-del"}},m={},d=[{value:"Filesystem Settling",id:"filesystem-settling",level:2},{value:"Advanced Settling",id:"advanced-settling",level:2},{value:"defer",id:"defer",level:3},{value:"drop",id:"drop",level:3},{value:"Source Control Aware Subscriptions",id:"source-control-aware-subscriptions",level:2}],p={toc:d};function u(e){var n=e.components,t=(0,i.Z)(e,o);return(0,r.mdx)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 1.6")),(0,r.mdx)("p",null,"Subscribes to changes against a specified root and requests that they be sent to\nthe client via its connection. The updates will continue to be sent while the\nconnection is open. If the connection is closed, the subscription is implicitly\nremoved."),(0,r.mdx)("p",null,"This makes the most sense in an application connecting via the socket interface,\nbut you may also subscribe via the command line tool if you're interested in\nobserving the changes for yourself:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},'$ watchman -j --server-encoding=json -p <<-EOT\n["subscribe", "/path/to/root", "mysubscriptionname", {\n  "expression": ["allof",\n    ["type", "f"],\n    ["not", "empty"],\n    ["suffix", "php"]\n  ],\n  "fields": ["name"]\n}]\nEOT\n')),(0,r.mdx)("p",null,"The example above registers a subscription against the specified root with the\nname ",(0,r.mdx)("inlineCode",{parentName:"p"},"mysubscriptionname"),"."),(0,r.mdx)("p",null,"The response to a subscribe command looks like this:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "version":   "1.6",\n  "subscribe": "mysubscriptionname"\n}\n')),(0,r.mdx)("p",null,"When the subscription is first established, the expression term is evaluated and\nif any files match, a subscription notification packet is generated and sent,\nunilaterally to the client."),(0,r.mdx)("p",null,"Then, each time a change is observed, and after the settle period has passed,\nthe expression is evaluated again. If any files are matched, the server will\nunilaterally send the query results to the client with a packet that looks like\nthis:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "version": "1.6",\n  "clock": "c:1234:123",\n  "files": ["one.php"],\n  "root":  "/path/being/watched",\n  "subscription": "mysubscriptionname"\n}\n')),(0,r.mdx)("p",null,"The subscribe command object allows the client to specify a since parameter; if\npresent in the command, the initial set of subscription results will only\ninclude files that changed since the specified clockspec, equivalent to using\nthe ",(0,r.mdx)("inlineCode",{parentName:"p"},"query")," command with the ",(0,r.mdx)("inlineCode",{parentName:"p"},"since")," generator."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'["subscribe", "/path/to/root", "myname", {\n  "since": "c:1234:123",\n  "expression": ["not", "empty"],\n  "fields": ["name"]\n}]\n')),(0,r.mdx)("p",null,'The suggested mode of operation is for the client process to maintain its own\nlocal copy of the last "clock" value and use that to establish the subscription\nwhen it first connects.'),(0,r.mdx)("h2",{id:"filesystem-settling"},"Filesystem Settling"),(0,r.mdx)("p",null,"Prior to watchman version 3.2, the settling behavior was to hold subscription\nnotifications until the kernel notification stream was complete."),(0,r.mdx)("p",null,"Starting in watchman version 3.2, after the notification stream is complete, if\nthe root appears to be a version control directory, subscription notifications\nwill be held until an outstanding version control operation is complete (at the\ntime of writing, this is based on the presence of either ",(0,r.mdx)("inlineCode",{parentName:"p"},".hg/wlock")," or\n",(0,r.mdx)("inlineCode",{parentName:"p"},".git/index.lock"),"). This behavior matches triggers and helps to avoid performing\ntransient work in response to files changing, for example, during a rebase\noperation."),(0,r.mdx)("p",null,"In some circumstances it is desirable for a client to observe the creation of\nthe control files at the start of a version control operation. You may specify\nthat you want this behavior by passing the ",(0,r.mdx)("inlineCode",{parentName:"p"},"defer_vcs")," flag to your subscription\ncommand invocation:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-bash"},'$ watchman -j -p <<-EOT\n["subscribe", "/path/to/root", "mysubscriptionname", {\n  "expression": ["allof",\n    ["type", "f"],\n    ["not", "empty"],\n    ["suffix", "php"]\n  ],\n  "defer_vcs": false,\n  "fields": ["name"]\n}]\nEOT\n')),(0,r.mdx)("h2",{id:"advanced-settling"},"Advanced Settling"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.4")),(0,r.mdx)("p",null,"In more complex integrations it is desirable to be able to have a watchman aware\napplication signal the beginning and end of some work that will generate a lot\nof change notifications. For example, Mercurial or Git could communicate with\nwatchman before and after updating the working copy."),(0,r.mdx)("p",null,"Some applications will want to know that the update is in progress and continue\nto process notifications. Others may want to defer processing the notifications\nuntil the update completes, and some may wish to drop any notifications produced\nwhile the update was in progress."),(0,r.mdx)("p",null,"Watchman subscriptions provide the mechanism for each of these use cases and\nexpose it via two new fields in the subscription object; ",(0,r.mdx)("inlineCode",{parentName:"p"},"defer")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"drop")," are\ndescribed below."),(0,r.mdx)("p",null,"It can be difficult to mix ",(0,r.mdx)("inlineCode",{parentName:"p"},"defer")," and ",(0,r.mdx)("inlineCode",{parentName:"p"},"drop")," with multiple overlapping states\nin the context of a given subscription stream as there is a single cursor to\ntrack the subscription position."),(0,r.mdx)("p",null,"If your application uses multiple overlapping states and wants to ",(0,r.mdx)("inlineCode",{parentName:"p"},"defer")," some\nresults and ",(0,r.mdx)("inlineCode",{parentName:"p"},"drop")," others, it is recommended that you use ",(0,r.mdx)("inlineCode",{parentName:"p"},"drop")," for all of the\nstates and then issues queries with ",(0,r.mdx)("inlineCode",{parentName:"p"},"since")," terms bounded by the ",(0,r.mdx)("inlineCode",{parentName:"p"},"clock")," fields\nfrom the subscription state PDUs to ensure that it observes all of the results\nof interest."),(0,r.mdx)("h3",{id:"defer"},"defer"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'["subscribe", "/path/to/root", "mysubscriptionname", {\n  "defer": ["mystatename"],\n  "fields": ["name"]\n}]\n')),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"defer")," field specifies a list of state names for which the subscriber\nwishes to defer the notification stream. When a watchman client signals that a\nstate has been entered via the ",(0,r.mdx)("a",{parentName:"p",href:"/watchman/docs/cmd/state-enter"},"state-enter")," command, if the\nstate name matches any in the ",(0,r.mdx)("inlineCode",{parentName:"p"},"defer")," list then the subscription will emit a\nunilateral subscription PDU like this:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "subscription":  "mysubscriptionname",\n  "root":          "/path/to/root",\n  "state-enter":   "mystatename",\n  "clock":         "<clock>",\n  "metadata":      <metadata from the state-enter command>\n}\n')),(0,r.mdx)("p",null,"Watchman will then defer sending any subscription PDUs with ",(0,r.mdx)("inlineCode",{parentName:"p"},"files")," payloads\nuntil the state is vacated either by a ",(0,r.mdx)("a",{parentName:"p",href:"/watchman/docs/cmd/state-leave"},"state-leave")," command\nor by the client that entered the state disconnecting from the watchman service."),(0,r.mdx)("p",null,"Once the state is vacated, watchman will emit a unilateral subscription PDU like\nthis:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'{\n  "subscription":  "mysubscriptionname",\n  "root":          "/path/to/root",\n  "state-leave":   "mystatename",\n  "clock":         "<clock>",\n  "metadata":      <metadata from the exit-state command>\n}\n')),(0,r.mdx)("p",null,"The subscription stream will then be re-enabled and notifications received since\nthe corresponding ",(0,r.mdx)("inlineCode",{parentName:"p"},"state-enter")," will be delivered to clients."),(0,r.mdx)("h3",{id:"drop"},"drop"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-json"},'["subscribe", "/path/to/root", "mysubscriptionname", {\n  "drop": ["mystatename"],\n  "fields": ["name"]\n}]\n')),(0,r.mdx)("p",null,"The ",(0,r.mdx)("inlineCode",{parentName:"p"},"drop")," field specifies a list of state names for which the subscriber wishes\nto discard the notification stream. It works very much like ",(0,r.mdx)("inlineCode",{parentName:"p"},"defer")," as described\nabove, but when a state is vacated, the pending notification stream is\nfast-forwarded to the clock of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"state-leave")," command, effectively\nsuppressing any notifications that were generated between the ",(0,r.mdx)("inlineCode",{parentName:"p"},"state-enter")," and\nthe ",(0,r.mdx)("inlineCode",{parentName:"p"},"state-leave")," commands."),(0,r.mdx)("h2",{id:"source-control-aware-subscriptions"},"Source Control Aware Subscriptions"),(0,r.mdx)("p",null,(0,r.mdx)("em",{parentName:"p"},"Since 4.9")),(0,r.mdx)("p",null,(0,r.mdx)("a",{parentName:"p",href:"/watchman/docs/scm-query"},"Read more about these here")))}u.isMDXComponent=!0}}]);