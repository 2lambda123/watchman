"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[4068],{3905:function(e,t,n){n.r(t),n.d(t,{MDXContext:function(){return c},MDXProvider:function(){return p},mdx:function(){return f},useMDXComponents:function(){return m},withMDXComponents:function(){return d}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i.apply(this,arguments)}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),d=function(e){return function(t){var n=m(t.components);return o.createElement(e,i({},t,{components:n}))}},m=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=m(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(n),p=r,h=d["".concat(a,".").concat(p)]||d[p]||u[p]||i;return n?o.createElement(h,s(s({ref:t},c),{},{components:n})):o.createElement(h,s({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},96636:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var o=n(83117),r=n(80102),i=(n(67294),n(3905)),a=["components"],s={title:"Query Synchronization",category:"Internals"},l=void 0,c={unversionedId:"cookies",id:"cookies",title:"Query Synchronization",description:"A file system monitor needs to make sure that queries see up-to-date views.",source:"@site/docs/cookies.md",sourceDirName:".",slug:"/cookies",permalink:"/watchman/docs/cookies",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/cookies.md",tags:[],version:"current",frontMatter:{title:"Query Synchronization",category:"Internals"},sidebar:"tutorialSidebar",previous:{title:"Contributing",permalink:"/watchman/docs/contributing"},next:{title:"Troubleshooting",permalink:"/watchman/docs/troubleshooting"}},d={},m=[{value:"Background",id:"background",level:2},{value:"How cookies work",id:"how-cookies-work",level:2},{value:"Limitation: macOS FSEvents",id:"limitation-macos-fsevents",level:2},{value:"Credits",id:"credits",level:2}],p={toc:m};function u(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.mdx)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.mdx)("p",null,"A file system monitor needs to make sure that queries see up-to-date views.\nWatchman ensures that by creating a unique ",(0,i.mdx)("em",{parentName:"p"},"cookie")," for each query made to it."),(0,i.mdx)("h2",{id:"background"},"Background"),(0,i.mdx)("p",null,"Consider a directory tree traversal to gather file status, such as the one\nperformed by ",(0,i.mdx)("inlineCode",{parentName:"p"},"hg status")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},"git status"),". The traversal will race with any\noperations happening concurrently, and this is impossible to fix. However, we do\nget some weaker guarantees:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Every file operation that happens before the traversal is started will be\nobserved."),(0,i.mdx)("li",{parentName:"ol"},"File operations that happen after the traversal is started may or may not be\nobserved.")),(0,i.mdx)("p",null,"For watchman, cookies enable us to provide similar guarantees. For a given\nwatchman query:"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Every file operation that happens before the query is started will be\nobserved."),(0,i.mdx)("li",{parentName:"ol"},"File operations that happen after the query is started may or may not be\nobserved.")),(0,i.mdx)("h2",{id:"how-cookies-work"},"How cookies work"),(0,i.mdx)("p",null,"A ",(0,i.mdx)("em",{parentName:"p"},"cookie")," is a temporary file that is created inside a directory observed by\nwatchman. The cookie is created in a directory that is expected not to go away.\nThe obvious location is the root itself, but we'd like cookies not to show up in\nVCS operations. So if a VCS directory (",(0,i.mdx)("inlineCode",{parentName:"p"},".git"),", ",(0,i.mdx)("inlineCode",{parentName:"p"},".hg")," or ",(0,i.mdx)("inlineCode",{parentName:"p"},".svn"),") is found, that's\nwhere cookies are created instead."),(0,i.mdx)("p",null,"The cookie is created while the root is locked, so watchman won't find the\ncookie by accident while processing events from a prior run."),(0,i.mdx)("p",null,"Once the cookie is created, the calling thread waits on a condition variable\nguarded by the root's lock. This causes the lock to be released, and the root's\nnotify thread can now read events as usual."),(0,i.mdx)("p",null,"When the notify thread finds that it is processing a cookie, it will signal its\nrespective condition variable. Importantly, this does not wake the calling\nthread up immediately: since the notify thread still holds the root lock, the\ncalling thread will only be able to proceed once the notify thread releases the\nlock."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"What do cookies get us?")),(0,i.mdx)("p",null,"File monitoring systems like ",(0,i.mdx)("inlineCode",{parentName:"p"},"inotify")," typically provide an ordering guarantee:\nnotifications arrive in the order they happen. Any events happening before the\ncookie is created will appear before the event for the cookie does, which means\nthey will be processed by the time the query is answered."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"How well do cookies work?")),(0,i.mdx)("p",null,"The Mercurial test suite has proved to be a good stress test for watchman.\nBefore cookies were implemented, if 16 or more tests from the suite were run in\nparallel, watchman would start falling behind and often produce outdated\nanswers. Cookies have successfully eradicated that."),(0,i.mdx)("p",null,(0,i.mdx)("em",{parentName:"p"},"Can watchman find a cookie even if not all events leading to its appearance\nhave been processed?")),(0,i.mdx)("p",null,"Consider this situation when cookies are created inside ",(0,i.mdx)("inlineCode",{parentName:"p"},".hg"),":"),(0,i.mdx)("ol",null,(0,i.mdx)("li",{parentName:"ol"},"Event A happens that would cause ",(0,i.mdx)("inlineCode",{parentName:"li"},".hg")," to be read recursively"),(0,i.mdx)("li",{parentName:"ol"},"Event B happens that touches a file ",(0,i.mdx)("inlineCode",{parentName:"li"},"subdir/foo")),(0,i.mdx)("li",{parentName:"ol"},"A cookie is created inside ",(0,i.mdx)("inlineCode",{parentName:"li"},".hg"),", causing event C"),(0,i.mdx)("li",{parentName:"ol"},"Event A is read from the OS file notification system but not events B and C"),(0,i.mdx)("li",{parentName:"ol"},"The cookie is found but ",(0,i.mdx)("inlineCode",{parentName:"li"},"subdir/foo")," is never read.")),(0,i.mdx)("p",null,"On Linux, to prevent this from happening, watchman will only consider a cookie\nto be found if it is directly returned via OS notifications. The only exception\nto this is during the initial crawl or a recrawl, when the cookie directory\nisn't being watched yet."),(0,i.mdx)("p",null,"On other platforms, this becomes more complicated because the respective\nmonitoring system only tells us that something inside a directory was created,\nnot what was created. This is currently an unresolved issue."),(0,i.mdx)("h2",{id:"limitation-macos-fsevents"},"Limitation: macOS FSEvents"),(0,i.mdx)("p",null,"On macOS, Watchman uses\n",(0,i.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/coreservices/file_system_events"},"FSEvents"),"\nto monitor filesystem changes. Watchman uses a combination of cookie files\ndescribed above and\n",(0,i.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/coreservices/1445629-fseventstreamflushsync"},"FSEventStreamFlushSync"),"\nto attempt to catch up with all prior changes."),(0,i.mdx)("p",null,"Unfortunately, in high-load situations like a large ",(0,i.mdx)("inlineCode",{parentName:"p"},"git checkout")," on a busy\nhost, we have observed that FSEvents from the ",(0,i.mdx)("inlineCode",{parentName:"p"},"git checkout")," may be received\nafter the cookie file notification and FSEventStreamFlushSync returning."),(0,i.mdx)("p",null,"It turns out that FSEvents provides no guarantees here, and relying on it for\nquery synchronization is unsupported on any current Apple platform. Their\nsuggested workaround is to implement a watcher with\n",(0,i.mdx)("a",{parentName:"p",href:"https://developer.apple.com/documentation/endpointsecurity"},"Endpoint Security"),".\nNobody has evaluated the feasibility of this yet."),(0,i.mdx)("p",null,"In the meantime, you can set a ",(0,i.mdx)("inlineCode",{parentName:"p"},"settle_period")," and ",(0,i.mdx)("inlineCode",{parentName:"p"},"settle_timeout")," on the\nquery. Both are integer milliseconds, and ",(0,i.mdx)("inlineCode",{parentName:"p"},"settle_period")," specifies the required\nquiescence before the watcher is considered caught up."),(0,i.mdx)("h2",{id:"credits"},"Credits"),(0,i.mdx)("p",null,"The idea was originally proposed by Matt Mackall ",(0,i.mdx)("a",{parentName:"p",href:"mailto:mpm@selenic.com"},"mpm@selenic.com"),"."))}u.isMDXComponent=!0}}]);