"use strict";(self.webpackChunkstaticdocs_starter=self.webpackChunkstaticdocs_starter||[]).push([[8678],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return l},MDXProvider:function(){return p},mdx:function(){return h},useMDXComponents:function(){return m},withMDXComponents:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),d=function(e){return function(n){var t=m(n.components);return r.createElement(e,a({},n,{components:t}))}},m=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=m(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=m(t),p=o,f=d["".concat(i,".").concat(p)]||d[p]||u[p]||a;return t?r.createElement(f,s(s({ref:n},l),{},{components:t})):r.createElement(f,s({ref:n},l))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},21135:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return u},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return m}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),i=["components"],s={title:"Socket Interface",category:"Invocation",sidebar_position:8},c=void 0,l={unversionedId:"socket-interface",id:"socket-interface",title:"Socket Interface",description:"Most simple uses of Watchman will invoke the watchman binary and process its",source:"@site/docs/socket-interface.md",sourceDirName:".",slug:"/socket-interface",permalink:"/watchman/docs/socket-interface",draft:!1,editUrl:"https://github.com/facebook/watchman/tree/main/website/docs/socket-interface.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"Socket Interface",category:"Invocation",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Configuration Files",permalink:"/watchman/docs/config"},next:{title:"Capabilities",permalink:"/watchman/docs/capabilities"}},d={},m=[{value:"Watchman Protocol",id:"watchman-protocol",level:2},{value:"JSON encoding",id:"json-encoding",level:3},{value:"BSER encoding",id:"bser-encoding",level:3},{value:"Reporting Errors and Warnings",id:"reporting-errors-and-warnings",level:3}],p={toc:m};function u(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.mdx)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"Most simple uses of Watchman will invoke the watchman binary and process its\noutput. Sometimes it is desirable to avoid the overhead of an extra process and\ntalk directly to your watchman service."),(0,a.mdx)("p",null,"The watchman service runs as a single long-lived process per user. The watchman\nbinary will take care of spawning the server process if necessary."),(0,a.mdx)("p",null,"The server will create a unix domain socket for communication with its clients.\nThe location of the socket depends on compile time options and command line\nflags. It is recommended that you invoke ",(0,a.mdx)("inlineCode",{parentName:"p"},"watchman get-sockname")," to discover the\nlocation, or if you are being invoked via a trigger (since version 2.9.7) you\nwill find the location in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"$WATCHMAN_SOCK")," environmental variable."),(0,a.mdx)("h2",{id:"watchman-protocol"},"Watchman Protocol"),(0,a.mdx)("p",null,"The unix socket implements a request-response protocol with PDUs encoded in\neither JSON or BSER representation. Some watchman commands (notably ",(0,a.mdx)("inlineCode",{parentName:"p"},"subscribe"),"\nand ",(0,a.mdx)("inlineCode",{parentName:"p"},"log-level"),") allow the watchman service to unilaterally send any number of\nPDUs to the client, and require more stateful handling."),(0,a.mdx)("h3",{id:"json-encoding"},"JSON encoding"),(0,a.mdx)("p",null,"The JSON encoding represents a request or a response as a single line of compact\nJSON encoded data. The newline is used to detect the end of the PDU."),(0,a.mdx)("p",null,"Requests from the client are always represented as a JSON array."),(0,a.mdx)("p",null,"Responses from the server are always represented as a JSON object."),(0,a.mdx)("p",null,"Sending the ",(0,a.mdx)("inlineCode",{parentName:"p"},"since")," command is simply a matter of formatting it as JSON. Note\nthat the JSON text must be a single line (don't send a pretty printed version of\nit!) and be followed by a newline ",(0,a.mdx)("inlineCode",{parentName:"p"},"\\n")," character:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-json"},'["since", "/path/to/src", "n:c_srcs", "*.c"] <NEWLINE>\n')),(0,a.mdx)("h3",{id:"bser-encoding"},"BSER encoding"),(0,a.mdx)("p",null,"BSER is a local-only binary serialization format that can represent the same\ndata types as JSON, but in a more compact form and not be limited to UTF-8\nrepresentation of strings."),(0,a.mdx)("p",null,"When you make a request using BSER, the server will respond in BSER encoding."),(0,a.mdx)("p",null,"You can ",(0,a.mdx)("a",{parentName:"p",href:"/watchman/docs/bser"},"read more about BSER in the BSER specification"),"."),(0,a.mdx)("h3",{id:"reporting-errors-and-warnings"},"Reporting Errors and Warnings"),(0,a.mdx)("p",null,"If a Response includes a field named ",(0,a.mdx)("inlineCode",{parentName:"p"},"error")," it indicates that the request was\nnot successful. The ",(0,a.mdx)("inlineCode",{parentName:"p"},"error")," field, if present, is a string value that can be\npresented to the user."),(0,a.mdx)("p",null,"If a Response includes a field named ",(0,a.mdx)("inlineCode",{parentName:"p"},"warning")," it indicates that there is some\ncondition that should be reported back to the user so that the system can\noperate more effectively. Tools should display this to the user as an advisory.\nAt the time of writing, this can be triggered due to overflowing the system\nlimits on file watching resources. These are important to address so that events\nare not missed and thus so that correctness and system performance are\nmaintained."),(0,a.mdx)("p",null,"The warning message contains a link to this documentation that provides advice\non tuning and resolving the issue."))}u.isMDXComponent=!0}}]);